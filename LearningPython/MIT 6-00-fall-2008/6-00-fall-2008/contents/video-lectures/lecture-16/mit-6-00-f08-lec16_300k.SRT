1
00:00:00 --> 00:00:00



2
00:00:00 --> 00:00:01
The following
content is provided under a

3
00:00:01 --> 00:00:03
Creative Commons license.


4
00:00:03 --> 00:00:06
Your support will help MIT
OpenCourseWare continue to

5
00:00:06 --> 00:00:10
offer high quality educational
resources for free.

6
00:00:10 --> 00:00:13
To make a donation or view
additional materials from

7
00:00:13 --> 00:00:17
hundreds of MIT courses,
visit MIT OpenCourseWare

8
00:00:17 --> 00:00:19
at ocw.mit.edu.


9
00:00:19 --> 00:00:24
PROFESSOR: Last lecture we were
talking about classes, and

10
00:00:24 --> 00:00:27
object-oriented programming,
and we're going to come

11
00:00:27 --> 00:00:29
back to it today.


12
00:00:29 --> 00:00:31
I'm going to remind you, we
were talking about it because

13
00:00:31 --> 00:00:34
we suggested it is a really
powerful way of structuring

14
00:00:34 --> 00:00:36
systems, and that's really why
we want to use it, It's

15
00:00:36 --> 00:00:38
a very common way of
structuring systems.

16
00:00:38 --> 00:00:41
So today I'm going to pick up
on a bunch of more nuanced, or

17
00:00:41 --> 00:00:44
more complex if you like, ways
of leveraging the

18
00:00:44 --> 00:00:46
power of classes.


19
00:00:46 --> 00:00:47
But we're going to see a
bunch of examples that are

20
00:00:47 --> 00:00:48
going to give us a sense.


21
00:00:48 --> 00:00:50
I'm going to talk about
inheritance, we're going to

22
00:00:50 --> 00:00:53
talk about shadowing, we're
going to talk about iterators.

23
00:00:53 --> 00:00:56
But before get to it, I want to
start by just highlighting,

24
00:00:56 --> 00:00:58
sort of, what was the
point of classes?

25
00:00:58 --> 00:00:59
So I'll remind you.


26
00:00:59 --> 00:01:06
A class, I said, was
basically a template for

27
00:01:06 --> 00:01:11
an abstract data type.


28
00:01:11 --> 00:01:13
And this was really to drive
home this idea of modularity.

29
00:01:13 --> 00:01:15
I want the ability to say, I've
got a set of things that

30
00:01:15 --> 00:01:18
naturally belong together, I'm
going to cluster them together,

31
00:01:18 --> 00:01:21
I want to treat it like it's a
primitive, I want to treat it

32
00:01:21 --> 00:01:23
like it's a float or
an int or a string.

33
00:01:23 --> 00:01:25
Is this going to be a point
or a segment or something

34
00:01:25 --> 00:01:26
different like that.


35
00:01:26 --> 00:01:28
So it's really a way, as I
said, of just trying to

36
00:01:28 --> 00:01:30
cluster data together.


37
00:01:30 --> 00:01:39
And this is a notion of
modularity slash abstraction

38
00:01:39 --> 00:01:40
where I'm treating
them as primitives.

39
00:01:40 --> 00:01:45
But the second thing we talked
about is that we also have a

40
00:01:45 --> 00:01:47
set of methods, using the
special name method because

41
00:01:47 --> 00:01:48
we're talking classes.


42
00:01:48 --> 00:01:52
But basically functions that
are designed to deal with

43
00:01:52 --> 00:01:53
this data structure.


44
00:01:53 --> 00:01:55
We're trying to group
those together as well.

45
00:01:55 --> 00:02:00
So we cluster data and methods.


46
00:02:00 --> 00:02:04
Second key thing we said was,
in the ideal case, which

47
00:02:04 --> 00:02:07
unfortunately Python isn't, but
we'll come back to that, in the

48
00:02:07 --> 00:02:10
ideal case, we would have data
hiding, and by data hiding,

49
00:02:10 --> 00:02:16
which is sort of a version of
encapsulation, what we meant

50
00:02:16 --> 00:02:21
was that you could only get to
the internal pieces of that

51
00:02:21 --> 00:02:24
data structure through
a proscribed method.

52
00:02:24 --> 00:02:26
Proscribed meaning it's
something I set up.

53
00:02:26 --> 00:02:30
So data hiding saying, you
would only access the

54
00:02:30 --> 00:02:39
parts through a method.


55
00:02:39 --> 00:02:47
And as we said, unfortunately
Python does not enforce this.

56
00:02:47 --> 00:02:50
Meaning that I could create one
of these data structures,

57
00:02:50 --> 00:02:53
ideally I'd have a method, that
I'm going to see some examples

58
00:02:53 --> 00:02:56
of that I used to get the parts
out, unfortunately in Python

59
00:02:56 --> 00:03:00
you could take the name the
instance dot some internal

60
00:03:00 --> 00:03:01
variable you'll get it back.


61
00:03:01 --> 00:03:02
It is exposed.


62
00:03:02 --> 00:03:03
And this is actually
just not a good idea.

63
00:03:03 --> 00:03:06
So I suggested in my very bad
humor, that you practice

64
00:03:06 --> 00:03:09
computational hygiene and you
only use appropriate methods

65
00:03:09 --> 00:03:11
to get the parts out.


66
00:03:11 --> 00:03:12
OK didn't laugh the joke last
time, you're not going to

67
00:03:12 --> 00:03:14
laugh at it this time,
I don't blame you.

68
00:03:14 --> 00:03:18
All right, and then the last
piece of this is that we said

69
00:03:18 --> 00:03:20
the class is a template.


70
00:03:20 --> 00:03:23
When we call that class,
it makes an instance.

71
00:03:23 --> 00:03:31
So class is used to make
instances, meaning particular

72
00:03:31 --> 00:03:36
versions, of that structure,
and we said inside the

73
00:03:36 --> 00:03:39
instances we have a
set of attributes.

74
00:03:39 --> 00:03:42
Internal variables, methods,
that are going to belong

75
00:03:42 --> 00:03:44
to that structure.


76
00:03:44 --> 00:03:48
OK, so with that in mind,
here's what I want to do.

77
00:03:48 --> 00:03:51
I'm going to show you a set of
examples, and I want to warn

78
00:03:51 --> 00:03:53
you ahead of time, the code
handout today is a little

79
00:03:53 --> 00:03:55
longer than normal because we
want to build essentially an

80
00:03:55 --> 00:03:58
extended example of a sequence
of examples of classes.

81
00:03:58 --> 00:04:00
We're going to see the idea, of
which we're gonna talk about,

82
00:04:00 --> 00:04:04
of inheritance or hierarchy, in
which we can have classes that

83
00:04:04 --> 00:04:06
are specializations
of other classes.

84
00:04:06 --> 00:04:08
We're gonna see how we can
inherit methods, how we can

85
00:04:08 --> 00:04:11
shadow methods, how we can use
methods in a variety of ways.

86
00:04:11 --> 00:04:14
So this is a way of suggesting
you may find it more convenient

87
00:04:14 --> 00:04:16
to put notes on the code
handout rather than

88
00:04:16 --> 00:04:17
in your own notes.


89
00:04:17 --> 00:04:19
Do whatever you like, but I
just wanted to alert you, we're

90
00:04:19 --> 00:04:22
going to go through a little
more code than normal.

91
00:04:22 --> 00:04:26
So, the little environment
I'm going to build is an

92
00:04:26 --> 00:04:27
environment of people.


93
00:04:27 --> 00:04:30
I'll build a simple little
simulation of people.

94
00:04:30 --> 00:04:33
So I'm going to start off with
the first class, which I've got

95
00:04:33 --> 00:04:35
up on the screen, and it's on
your handout as well, which is

96
00:04:35 --> 00:04:42
I'm going to build an instance,
or a class rather, of persons.

97
00:04:42 --> 00:04:44
I'm going to draw a diagram,
which I'm gonna try and see if

98
00:04:44 --> 00:04:48
I can do well, over here, of
the different objects

99
00:04:48 --> 00:04:49
we're going to have.


100
00:04:49 --> 00:04:57
So I've got, a class, and by
the way a class is an object.

101
00:04:57 --> 00:04:59
Instances are also objects,
but classes are objects.

102
00:04:59 --> 00:05:01
We're gonna see why we
want that in a second.

103
00:05:01 --> 00:05:03
Because I'm gonna build an
object, sorry a class,

104
00:05:03 --> 00:05:04
called a person.


105
00:05:04 --> 00:05:07
Now, let's walk through
some of the pieces here.

106
00:05:07 --> 00:05:10
The first one is, there's
something a little different.

107
00:05:10 --> 00:05:14
Remember last time we had that
keyword class and then a name,

108
00:05:14 --> 00:05:16
that name, in this case, person
says this is the name for the

109
00:05:16 --> 00:05:19
class, and then we would have
just had the semicolon and a

110
00:05:19 --> 00:05:21
bunch of internal things.


111
00:05:21 --> 00:05:23
Here I've got something in
parens, and I want to stress

112
00:05:23 --> 00:05:26
this is not a variable.


113
00:05:26 --> 00:05:29
All right, this is not a
def, this is a class.

114
00:05:29 --> 00:05:31
I'm going to come back to it,
but what this is basically

115
00:05:31 --> 00:05:36
saying is that the person class
is going to inherit from

116
00:05:36 --> 00:05:39
another class, which in this
case is just the built-in

117
00:05:39 --> 00:05:42
Python object class.


118
00:05:42 --> 00:05:44
Hold on to that thought, it's
going to make more sense when

119
00:05:44 --> 00:05:45
we look at a little more
interesting example, but I

120
00:05:45 --> 00:05:46
want to highlight that.


121
00:05:46 --> 00:05:51
All right now, if we do this,
as I said before, we can create

122
00:05:51 --> 00:06:00
a version of a person, let
me just call it per, person.

123
00:06:00 --> 00:06:00
OK?


124
00:06:00 --> 00:06:03
And what we said last time is,
when we wanted to create an

125
00:06:03 --> 00:06:06
instance inside of this class
definition, we've got

126
00:06:06 --> 00:06:08
one of those built-in
things called init.

127
00:06:08 --> 00:06:14
I'm gonna again remind you,
some of the methods we have,

128
00:06:14 --> 00:06:19
Underbar underbar init is
going to be the thing that

129
00:06:19 --> 00:06:23
creates the instance.


130
00:06:23 --> 00:06:26
Actually slightly misspeaking,
actually Python creates

131
00:06:26 --> 00:06:28
the instance, but it's one
thing that fills it in.

132
00:06:28 --> 00:06:34
So in this case, I'm going to
give it 2 arguments: Frank

133
00:06:34 --> 00:06:41
Foobar Now, you might have
said, wait a minute, init

134
00:06:41 --> 00:06:44
here has 3 arguments: self,
family name, and first name.

135
00:06:44 --> 00:06:48
So again, just to remind you,
what we said happens here is

136
00:06:48 --> 00:06:53
that when I call this class,
person, I'm creating

137
00:06:53 --> 00:06:54
an instance.


138
00:06:54 --> 00:06:57
We'll draw a little instance
diagram down here.

139
00:06:57 --> 00:06:59
I'm going to give
it the name per.

140
00:06:59 --> 00:07:01
And I should have said
inside of person, we've

141
00:07:01 --> 00:07:02
got a set of things.


142
00:07:02 --> 00:07:07
We've got our underbar underbar
init, we've got, what

143
00:07:07 --> 00:07:08
else do I have up there?


144
00:07:08 --> 00:07:13
Family name.


145
00:07:13 --> 00:07:17
And a bunch of other
methods, down to say.

146
00:07:17 --> 00:07:20
What happens inside of Python
is, when we called the class

147
00:07:20 --> 00:07:25
definition, person, it creates
an instance, there it is.

148
00:07:25 --> 00:07:28
Think of it as a pointer to a
spot in memory, and then what

149
00:07:28 --> 00:07:33
we do is, we call, or find,
that init method, up

150
00:07:33 --> 00:07:36
here, and we apply it.


151
00:07:36 --> 00:07:40
And the first argument self,
points to the instance.

152
00:07:40 --> 00:07:46
So this object here is
what self looks at.

153
00:07:46 --> 00:07:48
Now you can see what
init's going to do.

154
00:07:48 --> 00:07:51
It says, oh, inside of self,
which is pointing to here, let

155
00:07:51 --> 00:07:59
me bind a variable, which was,
can read that very carefully,

156
00:07:59 --> 00:08:04
it's family underbar name, to
the value I passed

157
00:08:04 --> 00:08:08
in, which was 4.


158
00:08:08 --> 00:08:11
Same thing with first name.


159
00:08:11 --> 00:08:15
OK, so the reason I'm stressing
this is, self we do not supply

160
00:08:15 --> 00:08:18
explicitly, it is supplied as
pointing to the instance, it's

161
00:08:18 --> 00:08:19
giving us that piece of memory.


162
00:08:19 --> 00:08:20
And that is what
then gets created.

163
00:08:20 --> 00:08:26
So here's, now, the
instance for per.

164
00:08:26 --> 00:08:28
OK, and I put a little label on
there, I'm going to call that

165
00:08:28 --> 00:08:33
an isALink, because it is
an instance of that class.

166
00:08:33 --> 00:08:33
God bless you.


167
00:08:33 --> 00:08:36
All right, so once we got
this, let's look at what

168
00:08:36 --> 00:08:38
we can do with person.


169
00:08:38 --> 00:08:41
That's why I built person here.


170
00:08:41 --> 00:08:44
And as I said, I've
already bound basically,

171
00:08:44 --> 00:08:45
those two pieces.


172
00:08:45 --> 00:08:53
If I want to get a value out,
I can give person, or per,

173
00:08:53 --> 00:08:56
rather, this instance,
a messaging.

174
00:08:56 --> 00:08:59
In this case I want to get
family, what did I say, family

175
00:08:59 --> 00:09:05
name out, now, again I want to
stress, what is happening

176
00:09:05 --> 00:09:09
here? per is an instance,
it's this thing here.

177
00:09:09 --> 00:09:12
When I say per dot family name,
I'm sending it a message, in

178
00:09:12 --> 00:09:15
essence what that does is, it
says, from here it's going to

179
00:09:15 --> 00:09:20
go up the chain to this class
object and find the appropriate

180
00:09:20 --> 00:09:23
method, which was family name.


181
00:09:23 --> 00:09:25
It is then going to apply
that to self, which

182
00:09:25 --> 00:09:27
points to this instance.


183
00:09:27 --> 00:09:30
And that allows it, therefore,
is you can see on the code, to

184
00:09:30 --> 00:09:33
look up under self, what's the
binding for family name,

185
00:09:33 --> 00:09:35
and print it back up.


186
00:09:35 --> 00:09:37
So self is always going to
point to the instance I

187
00:09:37 --> 00:09:39
want and I can use it.


188
00:09:39 --> 00:09:41
OK what else do
we have in here?

189
00:09:41 --> 00:09:42
We can get the first name,
that's not particularly

190
00:09:42 --> 00:09:43
interesting.


191
00:09:43 --> 00:09:51
We've got 2 other special
methods: that's cmp and str.

192
00:09:51 --> 00:09:57
All right, cmp is our
comparison method.

193
00:09:57 --> 00:10:01
And since I, I was about to say
I blew it last time, I misspoke

194
00:10:01 --> 00:10:03
last time, a wonderful phrase
that politicians like to

195
00:10:03 --> 00:10:05
use, I misspoke last time.


196
00:10:05 --> 00:10:07
Let me clarify again
what cmp will do.

197
00:10:07 --> 00:10:10
Underbar underbar cmp is going
to be the method you're

198
00:10:10 --> 00:10:16
going to use to compare two
instances of an object.

199
00:10:16 --> 00:10:17
Now, let's back up for second.


200
00:10:17 --> 00:10:20
If I wanted to test equality,
in fact I could use underbar

201
00:10:20 --> 00:10:23
underbar eq, under under.


202
00:10:23 --> 00:10:26
It's natural to think about an
equality tester as returning a

203
00:10:26 --> 00:10:28
Boolean, it's either gonna be
true or false, because

204
00:10:28 --> 00:10:31
something's either
equal to or not.

205
00:10:31 --> 00:10:34
In many languages, comparisons
also return Booleans, which is

206
00:10:34 --> 00:10:37
why I went down this
slippery slope.

207
00:10:37 --> 00:10:39
For many languages, either it's
greater than or it's not.

208
00:10:39 --> 00:10:41
But Python is different.


209
00:10:41 --> 00:10:44
Python use cmp, in fact it
has a built in cmp, which is

210
00:10:44 --> 00:10:47
what we're relying on here.


211
00:10:47 --> 00:10:48
Where am I, right there.


212
00:10:48 --> 00:10:52
And what cmp returns
is 1 of 3 values.

213
00:10:52 --> 00:10:56
Given 2 objects, it says if the
first one is less than the

214
00:10:56 --> 00:11:00
second one, it returns -1, if
it's equal it returns 0, if

215
00:11:00 --> 00:11:01
it's greater than,
it returns 1.

216
00:11:01 --> 00:11:05
So it allows you this broader
range of comparisons.

217
00:11:05 --> 00:11:08
And if you think about it, cmp,
you could apply on integers,

218
00:11:08 --> 00:11:10
you could apply it on floats,
apply it on strings.

219
00:11:10 --> 00:11:13
So it's overloaded, it has the
ability to do all of those.

220
00:11:13 --> 00:11:16
And in this case what we're
saying is, given 2 objects,

221
00:11:16 --> 00:11:20
let's create a tuple of the
first, sorry, family and first

222
00:11:20 --> 00:11:24
name of ourselves, and other is
another object, family and

223
00:11:24 --> 00:11:27
first name of that, and then
just use cmp to compare them.

224
00:11:27 --> 00:11:30
All right, so it's going
to use the base pieces.

225
00:11:30 --> 00:11:33
OK, so it gives me a way
of doing comparisons.

226
00:11:33 --> 00:11:37
And str we saw last time as
well, this is cmp does

227
00:11:37 --> 00:11:47
comparison, and str is our
printed representation.

228
00:11:47 --> 00:11:49
OK.


229
00:11:49 --> 00:11:54
So what we've got now, is
a simple little class.

230
00:11:54 --> 00:11:55
We've also got two
methods there.

231
00:11:55 --> 00:11:57
I want to look at them, we're
gonna come back to them, but

232
00:11:57 --> 00:12:02
they start to highlight things
we can do with our classes.

233
00:12:02 --> 00:12:03
So I've built one simple
version of it here,

234
00:12:03 --> 00:12:04
which is per.


235
00:12:04 --> 00:12:06
And notice I've got
another method, right

236
00:12:06 --> 00:12:08
up here, called say.


237
00:12:08 --> 00:12:12
And say takes two arguments,
for the moment the second

238
00:12:12 --> 00:12:14
argument, or the first
argument's, not going to make a

239
00:12:14 --> 00:12:17
lot of sense, but say takes two
arguments besides itself.

240
00:12:17 --> 00:12:19
It's going to take another
object to which it's saying

241
00:12:19 --> 00:12:22
something and the thing to say.


242
00:12:22 --> 00:12:24
Since I only have one object
here, I'm going to have

243
00:12:24 --> 00:12:25
person talk to himself.


244
00:12:25 --> 00:12:27
You may have met a few
other undergraduates

245
00:12:27 --> 00:12:28
who have this behavior.


246
00:12:28 --> 00:12:37
I'll have him talk to himself
and say, just some random

247
00:12:37 --> 00:12:40
message the faculty members
occasionally worry about.

248
00:12:40 --> 00:12:43
OK, what does this thing do?


249
00:12:43 --> 00:12:45
Now you're going to see
some of the power of this.

250
00:12:45 --> 00:12:48
Again, remember, I'm down here,
I'm sending this the message

251
00:12:48 --> 00:12:50
say, it's going to go up the
chain to find the say

252
00:12:50 --> 00:12:51
message in person.


253
00:12:51 --> 00:12:54
And what does say do, it says
given another object and some

254
00:12:54 --> 00:12:58
string, it's going to return,
oh, and interesting things,

255
00:12:58 --> 00:13:00
part of which you can't
see on the screen.

256
00:13:00 --> 00:13:04
First what it does, is it
gets first name of self.

257
00:13:04 --> 00:13:07
Remember self is pointing to
this instance, so it's simply

258
00:13:07 --> 00:13:10
looks up that binding,
which is Frank.

259
00:13:10 --> 00:13:12
It's going to create a string
in which it adds to that the

260
00:13:12 --> 00:13:16
family name of self, and then
another thing that says to, and

261
00:13:16 --> 00:13:22
then ah, I'm now going to send
a message to the other object,

262
00:13:22 --> 00:13:25
saying give me your first name.


263
00:13:25 --> 00:13:26
Going to add that to the second
piece, and you can see in this

264
00:13:26 --> 00:13:29
case it happens to be the
same first and family name.

265
00:13:29 --> 00:13:31
And then at the end of it,
which you can't see here but

266
00:13:31 --> 00:13:33
you can see in your handout,
I just append the whole

267
00:13:33 --> 00:13:35
string, so it spits it out.


268
00:13:35 --> 00:13:37
What's the point of this,
other than I can get

269
00:13:37 --> 00:13:38
it to say things?


270
00:13:38 --> 00:13:41
Notice, I can now reference
values of the instance.

271
00:13:41 --> 00:13:45
But I can also get values
of other instances, by

272
00:13:45 --> 00:13:46
sending in a message.


273
00:13:46 --> 00:13:51
And that's why we have
that form right there.

274
00:13:51 --> 00:13:54
And then it glued all together.


275
00:13:54 --> 00:13:56
If you think about this for a
second, you might say, wait a

276
00:13:56 --> 00:13:59
minute, actually you might have
said wait a minute a while ago,

277
00:13:59 --> 00:14:02
why am I just using the
variable name there in

278
00:14:02 --> 00:14:04
the function over here?


279
00:14:04 --> 00:14:07
Well in fact, I could've used
the function here, first

280
00:14:07 --> 00:14:09
name open close, right?


281
00:14:09 --> 00:14:10
It would have done
the same thing.

282
00:14:10 --> 00:14:15
But because I know I'm inside
the instance, it's perfectly

283
00:14:15 --> 00:14:18
reasonable to just
look up the value.

284
00:14:18 --> 00:14:21
OK, I could have, although I
don't want you to do it, have

285
00:14:21 --> 00:14:24
done the same thing there and
used underbar, sorry, first

286
00:14:24 --> 00:14:28
name underbar, sorry, first
underbar name, but that's

287
00:14:28 --> 00:14:30
really breaking this contract
that I want to happen.

288
00:14:30 --> 00:14:33
I should send the message to
get the method back out.

289
00:14:33 --> 00:14:36
So again the standard practices
is if you know you're inside

290
00:14:36 --> 00:14:38
the object, you can just
access the values.

291
00:14:38 --> 00:14:40
If you're doing it with any
other objects, send it a

292
00:14:40 --> 00:14:42
message to get it out.


293
00:14:42 --> 00:14:47
OK, now, that gives you an
ability to say, let's look at

294
00:14:47 --> 00:14:48
one more example here, and then
we're going to start building

295
00:14:48 --> 00:14:53
our hierarchy, which is, that
this person can also sing.

296
00:14:53 --> 00:14:54
And we've got a little
sing method here.

297
00:14:54 --> 00:14:57
And notice what it does, it's
going to sing to somebody, I

298
00:14:57 --> 00:14:59
guess you're part of
the Chorallaries.

299
00:14:59 --> 00:15:02
You're going to sing something,
and notice what it does, it's

300
00:15:02 --> 00:15:06
simply going to use its say
method, but add at the end of

301
00:15:06 --> 00:15:09
whatever's being said, just
tra la la at the end.

302
00:15:09 --> 00:15:14
So this is now an example of a
method using another method.

303
00:15:14 --> 00:15:16
Why would you want that?


304
00:15:16 --> 00:15:17
It's nice modularly.


305
00:15:17 --> 00:15:20
I have one method that's doing
saying, I have another method

306
00:15:20 --> 00:15:21
that's just building on it.


307
00:15:21 --> 00:15:27
So if I have is person sing
to themselves, not a highly

308
00:15:27 --> 00:15:36
recommended activity, it
would help if I had it sing

309
00:15:36 --> 00:15:45
to itself, not sing to
sing, sorry about that.

310
00:15:45 --> 00:15:47
Notice what it does.


311
00:15:47 --> 00:15:49
Looks like exactly like a
say method, except it's

312
00:15:49 --> 00:15:51
got tra la la at the end.


313
00:15:51 --> 00:15:53
Don't worry I'm not
going to sing to you.

314
00:15:53 --> 00:15:56
I'll simply say the words.


315
00:15:56 --> 00:15:58
Power of this, other than
the silly examples.

316
00:15:58 --> 00:16:01
You see how I can access
variables of the instance, how

317
00:16:01 --> 00:16:05
I can access variables of other
instances, going to come back

318
00:16:05 --> 00:16:10
to that, and how I can use
versions of my own methods to

319
00:16:10 --> 00:16:11
implement other methods.


320
00:16:11 --> 00:16:14
In this case sing is using
say as part of what

321
00:16:14 --> 00:16:17
it wants to get out.


322
00:16:17 --> 00:16:20
OK, so we got a simple
little example.

323
00:16:20 --> 00:16:25
Now, let's start adding
some other pieces to this.

324
00:16:25 --> 00:16:28
OK, and what do I want to add.


325
00:16:28 --> 00:16:29
Find my spot here.


326
00:16:29 --> 00:16:37
OK, we're going to
add an MIT person.

327
00:16:37 --> 00:16:46
Sorry, machine is -- do
this, let's go down.

328
00:16:46 --> 00:16:49
OK so I'm going to
add an MIT person.

329
00:16:49 --> 00:16:51
Look at the code for second.


330
00:16:51 --> 00:16:52
Aha!


331
00:16:52 --> 00:16:53
Notice what this says.


332
00:16:53 --> 00:17:09
MIT person says it
inherits from person.

333
00:17:09 --> 00:17:10
That is, that's the first
thing in parens up there.

334
00:17:10 --> 00:17:13
It says, you know, class
of MIT person is person.

335
00:17:13 --> 00:17:17
What that is saying is, that
this is a specialization

336
00:17:17 --> 00:17:18
of the person class.


337
00:17:18 --> 00:17:25
Or another way of saying it
is, we have a super class,

338
00:17:25 --> 00:17:27
in this case it's person.


339
00:17:27 --> 00:17:35
And we have a subclass, in
this case its MIT person.

340
00:17:35 --> 00:17:37
And we're going to walk through
some examples, but what it says

341
00:17:37 --> 00:17:41
is that that subclass of MIT
person can inherit the

342
00:17:41 --> 00:17:44
attributes of the person class.


343
00:17:44 --> 00:17:47
Can inherit the methods,
it can inherit variables.

344
00:17:47 --> 00:17:49
OK, what does MIT person do?


345
00:17:49 --> 00:17:50
Well, here's 1 of the
new things it does.

346
00:17:50 --> 00:17:58
It has a local variable
called next id num, which

347
00:17:58 --> 00:18:00
is initially set to 0.


348
00:18:00 --> 00:18:01
See that up there.


349
00:18:01 --> 00:18:04
And then it's got some methods,
it's got an init method, a get

350
00:18:04 --> 00:18:08
id method, a few other things.


351
00:18:08 --> 00:18:11
OK, let's run this.


352
00:18:11 --> 00:18:19
In particular, I go
back down to this one.

353
00:18:19 --> 00:18:23
Let me just uncomment
this and do it here.

354
00:18:23 --> 00:18:26
Assuming my machine will do
what I want it to do, which

355
00:18:26 --> 00:18:31
it really doesn't seem
to want to do today.

356
00:18:31 --> 00:18:37
Try one more time.


357
00:18:37 --> 00:18:40
Thank you, yep.


358
00:18:40 --> 00:18:44
Still not doing
it for me, John.

359
00:18:44 --> 00:18:45
OK, we type it.


360
00:18:45 --> 00:18:47
No idea what Python doesn't
like me today, but it doesn't.

361
00:18:47 --> 00:18:56
So we're gonna define p 1,
I've lost my keyboard,

362
00:18:56 --> 00:18:57
indeed I have.


363
00:18:57 --> 00:19:01
Try one more time. p 1 MIT
person, see how fast I can type

364
00:19:01 --> 00:19:15
here -- OK, now, let's look at
what the code does, because

365
00:19:15 --> 00:19:18
again it's going to
highlight some things.

366
00:19:18 --> 00:19:22
I called MIT person, push this
up slightly, it's going to

367
00:19:22 --> 00:19:27
create an instance down
here, I called p 1.

368
00:19:27 --> 00:19:29
And when I would do that,
I'm gonna initialize it.

369
00:19:29 --> 00:19:36
So I've got, right up here, an
initializer, init for MIT

370
00:19:36 --> 00:19:40
person, takes in the family
name and the first name.

371
00:19:40 --> 00:19:42
Notice what it does.


372
00:19:42 --> 00:19:43
Huh.


373
00:19:43 --> 00:19:46
It says, if I'm sitting here at
MIT person, I'm going to go up

374
00:19:46 --> 00:19:52
and inherit from person its
init function and call it.

375
00:19:52 --> 00:19:53
And what am I calling it on?


376
00:19:53 --> 00:19:56
I'm calling it on self, which
is pointing to this object, so

377
00:19:56 --> 00:19:59
I've still got it, and then I'm
then going to apply the

378
00:19:59 --> 00:20:01
base initialization.


379
00:20:01 --> 00:20:03
And that does exactly what
you'd expect, which is just

380
00:20:03 --> 00:20:08
going to create a binding
for family name down here.

381
00:20:08 --> 00:20:10
As well as some other things.


382
00:20:10 --> 00:20:18
So this is an example
of inheritance.

383
00:20:18 --> 00:20:23
MIT person inherits the init
method from person, can get

384
00:20:23 --> 00:20:25
access to by simply referring
to it, and I refer

385
00:20:25 --> 00:20:26
to it right there.


386
00:20:26 --> 00:20:30
And it's take the person class,
get its init and apply it to my

387
00:20:30 --> 00:20:32
instance plus those things.


388
00:20:32 --> 00:20:34
So I'm just using the
same piece of code

389
00:20:34 --> 00:20:35
Notice the second
thing it does.

390
00:20:35 --> 00:20:39
It says inside of self, I'm
going to bind the local

391
00:20:39 --> 00:20:43
variable id name to the value
of next id name in MIT person.

392
00:20:43 --> 00:20:47
Self is down here, id
num, sorry, not id name.

393
00:20:47 --> 00:20:51
I'm going to bind that to the
value that I find my going up

394
00:20:51 --> 00:20:56
to here, which is 0, and
having done that, I simply

395
00:20:56 --> 00:21:03
increment that value.


396
00:21:03 --> 00:21:05
OK?


397
00:21:05 --> 00:21:06
So what has this done?


398
00:21:06 --> 00:21:10
It says I now have captured in
the class, a local variable

399
00:21:10 --> 00:21:11
that I can keep track of.


400
00:21:11 --> 00:21:14
And when I use it, every
time I generate an example,

401
00:21:14 --> 00:21:16
let me build another one.


402
00:21:16 --> 00:21:33
I make p 2 another MIT person.


403
00:21:33 --> 00:21:36
OK, I can do things like
saying, what is the id

404
00:21:36 --> 00:21:43
number for each of these.


405
00:21:43 --> 00:21:52
First one is 0, second one is
1, which makes sense, right?

406
00:21:52 --> 00:21:54
I'm just incrementing
a global variable.

407
00:21:54 --> 00:21:57
Now, things I want you
to see about this.

408
00:21:57 --> 00:22:00
Now that I've got a beginning
of a hierarchy, I have this

409
00:22:00 --> 00:22:02
notion of inheritance.


410
00:22:02 --> 00:22:07
I can ask a function inside one
class to use a function from a

411
00:22:07 --> 00:22:09
class that it can reach
by going up the chain.

412
00:22:09 --> 00:22:10
I just did it there.


413
00:22:10 --> 00:22:13
I can ask it to go get
values of variables,

414
00:22:13 --> 00:22:15
right, so that looks good.


415
00:22:15 --> 00:22:17
What else do we have in
person or MIT person?

416
00:22:17 --> 00:22:18
Well, we can get the id
number, we just did.

417
00:22:18 --> 00:22:20
We have a thing to do
with this string.

418
00:22:20 --> 00:22:22
Notice it's going to print out
something a little different.

419
00:22:22 --> 00:22:24
In fact, there's a kind
of funky form there.

420
00:22:24 --> 00:22:26
Which just says, if I want to
print it out, I'm gonna create,

421
00:22:26 --> 00:22:30
what this says to do is, I'm
gonna create an output template

422
00:22:30 --> 00:22:34
that has that structure to it,
but where I see that percent s

423
00:22:34 --> 00:22:37
I'm going to substitute this
value for the first one,

424
00:22:37 --> 00:22:39
that value for the second.


425
00:22:39 --> 00:22:41
So if I say, what is p 1?


426
00:22:41 --> 00:22:49
It says ok, MIT
person Fred Smith.

427
00:22:49 --> 00:22:53
On the other hand, if I said,
what is per, which is that

428
00:22:53 --> 00:22:55
thing I build earlier, it had
a different string method,

429
00:22:55 --> 00:23:00
which is just print out
person, those pieces.

430
00:23:00 --> 00:23:02
All right, one last
piece to this and we're

431
00:23:02 --> 00:23:04
going to add to it.


432
00:23:04 --> 00:23:08
Suppose I want Fred
to say something.

433
00:23:08 --> 00:23:20
Say something to Jane.


434
00:23:20 --> 00:23:23
OK, he said it.


435
00:23:23 --> 00:23:27
Where's the say method?


436
00:23:27 --> 00:23:32
OK, Fred is an instance of
an MIT person. where's

437
00:23:32 --> 00:23:34
the say method?


438
00:23:34 --> 00:23:36
Well, there isn't one there,
but again, that's where

439
00:23:36 --> 00:23:37
the hierarchy comes in.


440
00:23:37 --> 00:23:41
Fred is this object here, I'm
sending it the message say.

441
00:23:41 --> 00:23:44
That turns into going up the
chain to this object, which is

442
00:23:44 --> 00:23:48
the class object, and saying
find a say method and apply

443
00:23:48 --> 00:23:49
it to that instance.


444
00:23:49 --> 00:23:51
Fudge-knuckle, it ain't here.


445
00:23:51 --> 00:23:53
Don't worry about it, because
it says if I can't find one

446
00:23:53 --> 00:23:57
there, I'm going to go up the
chain to this method, sorry to

447
00:23:57 --> 00:23:59
this class, and look
for a method there.

448
00:23:59 --> 00:24:01
Which there was one,
I have a say method.

449
00:24:01 --> 00:24:03
It's going to use
that say method.

450
00:24:03 --> 00:24:05
Apply to it.


451
00:24:05 --> 00:24:07
Well, you might say, OK, what
happens if it isn't there?

452
00:24:07 --> 00:24:10
Well, that's where, remember I
defined person to be an

453
00:24:10 --> 00:24:12
instance of an object, it will
go up the chain one last time

454
00:24:12 --> 00:24:15
to the base object in
Python to see is there a

455
00:24:15 --> 00:24:16
method there or not.


456
00:24:16 --> 00:24:19
Probably isn't a say method for
an object, so at that point

457
00:24:19 --> 00:24:21
it's going to raise an
exception or throw an error.

458
00:24:21 --> 00:24:24
But now you again see this idea
that the inheritance lets

459
00:24:24 --> 00:24:27
you capture methods.


460
00:24:27 --> 00:24:29
Now you might say, why not
just put a say method

461
00:24:29 --> 00:24:31
inside of MIT person?


462
00:24:31 --> 00:24:34
Well, if you wanted it to do
something different, that would

463
00:24:34 --> 00:24:35
be the right thing to do.


464
00:24:35 --> 00:24:36
But the whole notion
here's that

465
00:24:36 --> 00:24:39
I'm capturing modularity,
I've got base methods

466
00:24:39 --> 00:24:40
up in my base class.


467
00:24:40 --> 00:24:43
If I just want to use them I'm
just going to inherit them by

468
00:24:43 --> 00:24:48
following that chain, if you
like, basically up the track.

469
00:24:48 --> 00:24:54
OK, so we've got an MIT
person, we can use that.

470
00:24:54 --> 00:24:58
Let's add a little bit more
to our hierarchy here.

471
00:24:58 --> 00:25:03
I'm going to create, if I can
do this right, a specialization

472
00:25:03 --> 00:25:12
of an MIT person, which
is an undergraduate.

473
00:25:12 --> 00:25:14
A special kind of MIT person.


474
00:25:14 --> 00:25:19
All right, so if I go back up
here, even though my thing is

475
00:25:19 --> 00:25:23
not going to let me do it,
let's build an undergraduate.

476
00:25:23 --> 00:25:26
OK, there's the class
definition for an undergrad.

477
00:25:26 --> 00:25:29
We're just starting to see some
of the pieces, right, so in an

478
00:25:29 --> 00:25:31
undergraduate, where am I
here, an undergraduate.

479
00:25:31 --> 00:25:34
OK, it's also got an
initialization function.

480
00:25:34 --> 00:25:38
So if I call undergrad, I'm
gonna make an undergrad here,

481
00:25:38 --> 00:25:44
again let me go back down
here, line ug 2 it's making

482
00:25:44 --> 00:25:54
undergrad, Jane Doe.


483
00:25:54 --> 00:25:58
Now, what happens when I do
the initialization here?

484
00:25:58 --> 00:25:59
Notice what goes on.


485
00:25:59 --> 00:26:03
It simply calls the person
initialization method.

486
00:26:03 --> 00:26:05
All right, so I'm down here.


487
00:26:05 --> 00:26:06
I'm going to call the
person initialization

488
00:26:06 --> 00:26:07
method, what did do?


489
00:26:07 --> 00:26:11
Sorry, the MIT person method,
it calls the person method.

490
00:26:11 --> 00:26:13
Just walking up the chain,
that's going to do exactly what

491
00:26:13 --> 00:26:15
I did with all the other ones,
so I now have a family

492
00:26:15 --> 00:26:17
name and a first name.


493
00:26:17 --> 00:26:22
So I can, for example,
say family name and

494
00:26:22 --> 00:26:24
get it back out.


495
00:26:24 --> 00:26:25
All right?


496
00:26:25 --> 00:26:28
And then, other things that I
can do, well I can set what

497
00:26:28 --> 00:26:29
year the person's in, I can
figure out what year they're

498
00:26:29 --> 00:26:32
in, there's this unfortunate
overflow error if you've hung

499
00:26:32 --> 00:26:35
around too long, but that's
not going to happen to you.

500
00:26:35 --> 00:26:38
And I've now got a say method
here, so let's look what

501
00:26:38 --> 00:26:52
happens if I ask the
undergraduate to say something.

502
00:26:52 --> 00:26:57
OK, it's not a realistic
dialogue I know, but,

503
00:26:57 --> 00:27:00
what did this method do?


504
00:27:00 --> 00:27:02
I asked this object
to do a say.

505
00:27:02 --> 00:27:05
And notice what it does.


506
00:27:05 --> 00:27:08
It simply passes it
back up to MIT person.

507
00:27:08 --> 00:27:09
There's that inheritance again.


508
00:27:09 --> 00:27:11
It's saying, I'm going
to have my base say

509
00:27:11 --> 00:27:13
method say something.


510
00:27:13 --> 00:27:15
I'm going to say it to a
person, but all I'm going to do

511
00:27:15 --> 00:27:17
because undergraduates in my
experience, at least, are

512
00:27:17 --> 00:27:19
always very polite, I'm going
to put "Excuse me but"

513
00:27:19 --> 00:27:22
at the front of it.


514
00:27:22 --> 00:27:24
OK, what am I trying
to show you here?

515
00:27:24 --> 00:27:26
I know the jokes are awful,
but what am I trying

516
00:27:26 --> 00:27:28
to show you here?


517
00:27:28 --> 00:27:31
That I can simply pass
up the chain to get it.

518
00:27:31 --> 00:27:33
In fact, what method does
the final say here?

519
00:27:33 --> 00:27:36
What class does it come from?


520
00:27:36 --> 00:27:37
Person class, yes, thank you.


521
00:27:37 --> 00:27:39
It goes all the way up to
person, right, because MIT

522
00:27:39 --> 00:27:40
person didn't have a say.


523
00:27:40 --> 00:27:44
So I can simply walk up the
chain until I find the

524
00:27:44 --> 00:27:45
method I want to have.


525
00:27:45 --> 00:27:52
Now this is an example
of shadowing.

526
00:27:52 --> 00:27:54
Not a great example, but it's a
beginning example of shadowing,

527
00:27:54 --> 00:28:00
in that this same method for an
undergraduate, shadows the base

528
00:28:00 --> 00:28:02
say method, it happens to
call it, but it changes it.

529
00:28:02 --> 00:28:04
It puts "Excuse me but"
at the front, before it

530
00:28:04 --> 00:28:06
goes on to do something.


531
00:28:06 --> 00:28:11
Now again, I could have decided
here to actually copy what the

532
00:28:11 --> 00:28:14
original say method did, stitch
all the other things together.

533
00:28:14 --> 00:28:16
But again, that loses
my modularity.

534
00:28:16 --> 00:28:19
I'd really to only have to
change it in one place.

535
00:28:19 --> 00:28:22
So by putting my say method up
in person, I can add these

536
00:28:22 --> 00:28:24
nuances to it, and it lets me
have something that

537
00:28:24 --> 00:28:25
has that variation.


538
00:28:25 --> 00:28:29
If I decide I want to change
what say does, I only have

539
00:28:29 --> 00:28:30
to change it in one place.


540
00:28:30 --> 00:28:33
It is in the person class
definition, and everything else

541
00:28:33 --> 00:28:36
will follow through for free.


542
00:28:36 --> 00:28:40
OK, so now I've got
an undergrad, right?

543
00:28:40 --> 00:28:42
Let's look at a couple
of variations of

544
00:28:42 --> 00:28:42
what happens here.


545
00:28:42 --> 00:28:50
So first of all, I can -- yes?


546
00:28:50 --> 00:28:54
PROFESSOR 2: Shadowing
here is often sometimes

547
00:28:54 --> 00:28:55
called overriding.


548
00:28:55 --> 00:28:57
PROFESSOR: Yes, thank you,
because I'm going to do a

549
00:28:57 --> 00:29:00
pure example of shadowing
in a second, John right.

550
00:29:00 --> 00:29:04
Also called overriding.


551
00:29:04 --> 00:29:06
Part of the reason I like the
phrase shadow is, if you think

552
00:29:06 --> 00:29:09
about it as looking at it from
this direction, you see this

553
00:29:09 --> 00:29:11
version of init before you see
the other ones, or you see that

554
00:29:11 --> 00:29:13
version of say, but it
is overriding the

555
00:29:13 --> 00:29:15
base say example.


556
00:29:15 --> 00:29:18
OK, so I can say, what does
p 1, sorry, yes, what

557
00:29:18 --> 00:29:19
does undergrad look like?


558
00:29:19 --> 00:29:23
And I said wait a
minute, MIT person, not

559
00:29:23 --> 00:29:26
undergrad, is that right?


560
00:29:26 --> 00:29:28
Well, where's the str method?


561
00:29:28 --> 00:29:31
I didn't define one in
undergrad, so it again tracks

562
00:29:31 --> 00:29:34
up the chain and finds the str
method here, so it's OK

563
00:29:34 --> 00:29:37
undergrads are MIT people most
the time, so it's

564
00:29:37 --> 00:29:39
perfectly fine.


565
00:29:39 --> 00:29:43
OK, now, I have built into
this also these cmp methods.

566
00:29:43 --> 00:29:44
So I've got two examples.


567
00:29:44 --> 00:29:47
I've got undergrad, or ug.


568
00:29:47 --> 00:29:50
And then I've got poor
old Frank Foobar back

569
00:29:50 --> 00:29:53
there, per person.


570
00:29:53 --> 00:29:58
So suppose I want
to compare them?

571
00:29:58 --> 00:30:01
What do you think happens here?


572
00:30:01 --> 00:30:03
Compare sounds weird, right,
I compare an undergraduate

573
00:30:03 --> 00:30:04
to a person.


574
00:30:04 --> 00:30:05
I don't know what that's
doing, some kind of weird

575
00:30:05 --> 00:30:08
psychological thing, but what
do you think happens in terms

576
00:30:08 --> 00:30:12
of the code here if I run this.


577
00:30:12 --> 00:30:13
I know it's a little hard
because you got a lot

578
00:30:13 --> 00:30:15
of code to look at.


579
00:30:15 --> 00:30:18
Do I have a cmp method
defined somewhere?

580
00:30:18 --> 00:30:19
Yeah.


581
00:30:19 --> 00:30:21
So, it's hard to know what
it's going to do, but

582
00:30:21 --> 00:30:25
let's look at it.


583
00:30:25 --> 00:30:27
Hmm.


584
00:30:27 --> 00:30:29
Now sometimes I type things and
I got errors I don't expect,

585
00:30:29 --> 00:30:30
this one I did expect.


586
00:30:30 --> 00:30:31
So what happened here?


587
00:30:31 --> 00:30:34
Well let's talk about what
happens if I do that comparison

588
00:30:34 --> 00:30:39
I was doing, what was I doing?


589
00:30:39 --> 00:30:42
Ug greater than per?


590
00:30:42 --> 00:30:46
What unwinds into is, I'm
going to send to ug, that

591
00:30:46 --> 00:30:49
instance, a cmp method.


592
00:30:49 --> 00:30:52
This is really going to become
something like ug dot under

593
00:30:52 --> 00:30:57
under cmp under under
applied to per.

594
00:30:57 --> 00:30:59
I think that's close.


595
00:30:59 --> 00:31:00
What does that do?


596
00:31:00 --> 00:31:03
It says starting in ug, I'm
going to look for the first cmp

597
00:31:03 --> 00:31:07
method I could find, which
is actually sitting here.

598
00:31:07 --> 00:31:10
I had a cmp method
in MIT person.

599
00:31:10 --> 00:31:11
If you look at your
code, what does it do?

600
00:31:11 --> 00:31:14
It looks up the id
numbers to compare them.

601
00:31:14 --> 00:31:17
Well the, ug has an id number
because it was created

602
00:31:17 --> 00:31:18
along this chamber.


603
00:31:18 --> 00:31:20
Remember per over here was
just created as a person.

604
00:31:20 --> 00:31:24
It doesn't have an id number,
so that's why it complaints.

605
00:31:24 --> 00:31:29
Ok, happens if I do that?


606
00:31:29 --> 00:31:30
Compare per to ug.


607
00:31:30 --> 00:31:36
How many people think
I get an error?

608
00:31:36 --> 00:31:37
Wow.


609
00:31:37 --> 00:31:38
How many people think I'm
going to get either true

610
00:31:38 --> 00:31:41
or false out of this?


611
00:31:41 --> 00:31:43
A few brave hands.


612
00:31:43 --> 00:31:44
Why?


613
00:31:44 --> 00:31:45
Can I ask you, please?


614
00:31:45 --> 00:31:47
Why do you think I'm going to
get a, doesn't matter whether

615
00:31:47 --> 00:31:48
it's true or false, why am I
going to have something work

616
00:31:48 --> 00:31:50
this time that didn't
work last time?

617
00:31:50 --> 00:32:00
STUDENT: [INAUDIBLE]


618
00:32:00 --> 00:32:01
PROFESSOR: Yeah, exactly.


619
00:32:01 --> 00:32:02
And in case you didn't hear
it, thank you, great answer,

620
00:32:02 --> 00:32:04
sorry, terrible throw.


621
00:32:04 --> 00:32:08
In this case I'm using per,
that's the first part,

622
00:32:08 --> 00:32:10
so it's not symmetric.


623
00:32:10 --> 00:32:12
It's gonna use per
to do the look up.

624
00:32:12 --> 00:32:14
And as it was said there,
per over here goes up and

625
00:32:14 --> 00:32:17
finds a cmp method here
which it can apply.

626
00:32:17 --> 00:32:21
In that case, it simply looked
at, remember, it took the

627
00:32:21 --> 00:32:24
tuples of first and last name
which are both defined

628
00:32:24 --> 00:32:27
here, and did some
comparison on that.

629
00:32:27 --> 00:32:29
So this is a way of again
pointing out to you that the

630
00:32:29 --> 00:32:31
things are not always
symmetric, and I have to be

631
00:32:31 --> 00:32:33
careful about where do I
find the methods as

632
00:32:33 --> 00:32:34
I want to use them.


633
00:32:34 --> 00:32:36
Ok?


634
00:32:36 --> 00:32:38
All right.


635
00:32:38 --> 00:32:41
Let's add, I'm gonna do
two more classes here.

636
00:32:41 --> 00:32:44
Let's add one more class, some
people debate whether these are

637
00:32:44 --> 00:32:46
really people or not, but we're
going to add a class

638
00:32:46 --> 00:32:49
called a professor.


639
00:32:49 --> 00:32:51
OK.


640
00:32:51 --> 00:32:52
Now what am I doing?


641
00:32:52 --> 00:32:59
I'm creating another version
of class down here.

642
00:32:59 --> 00:33:02
Which again is an instance, or
a subclass, sorry, not an

643
00:33:02 --> 00:33:04
instance, a subclass
of an MIT person.

644
00:33:04 --> 00:33:08
I see that because I
built it to be there.

645
00:33:08 --> 00:33:10
Again I've got an
initialization that's going to

646
00:33:10 --> 00:33:13
call the person initialization,
which we know is going to go up

647
00:33:13 --> 00:33:16
-- I keep saying that -- going
to call the MIT person

648
00:33:16 --> 00:33:18
initialization, which is going
to go up and call this one.

649
00:33:18 --> 00:33:21
So again I'm going to
be able to find names.

650
00:33:21 --> 00:33:22
And I do a couple of other
different things here.

651
00:33:22 --> 00:33:26
I'm gonna pass in a rank, full
professor, associate professor,

652
00:33:26 --> 00:33:30
assistant professor, which I'm
just going to bind locally.

653
00:33:30 --> 00:33:32
But I'm gonna add one other
piece here, which is I'm gonna

654
00:33:32 --> 00:33:35
add a little dictionary
on teaching.

655
00:33:35 --> 00:33:38
So when I create a professor,
I'm gonna associate with it a

656
00:33:38 --> 00:33:41
dictionary that says, what
have you been teaching?

657
00:33:41 --> 00:33:43
And then notice the
methods I create.

658
00:33:43 --> 00:33:47
I've got a method here called
add teaching, takes, obviously

659
00:33:47 --> 00:33:49
a pointer to the instance.


660
00:33:49 --> 00:33:52
A term, which will just be
a string, and a subject.

661
00:33:52 --> 00:33:54
And let's look at what
it does right here.

662
00:33:54 --> 00:33:56
OK.


663
00:33:56 --> 00:33:58
In fact the call I'm going to
make, I'm not certain I'm going

664
00:33:58 --> 00:34:02
to be able to get away with it,
my machine is still wonderfully

665
00:34:02 --> 00:34:06
broken, all right, it is, let
me just show you what the

666
00:34:06 --> 00:34:07
calls would look like.


667
00:34:07 --> 00:34:11
As you can see here I'm not
going to be able to do them.

668
00:34:11 --> 00:34:15
But I'm going to add teaching,
as a method call with this

669
00:34:15 --> 00:34:20
with a string for term,
and a subject number.

670
00:34:20 --> 00:34:26
What is this going to do?


671
00:34:26 --> 00:34:28
Yeah, I know I'm just worried
if I restart Python, I may not

672
00:34:28 --> 00:34:30
be able to pull the thing back
in, so I'm going to try and

673
00:34:30 --> 00:34:32
wing it, John, and see if
I can make it happen.

674
00:34:32 --> 00:34:34
Right, what does
that teaching do?

675
00:34:34 --> 00:34:36
It's got one of those
try except methods.

676
00:34:36 --> 00:34:38
So what does it say
it's going to do?

677
00:34:38 --> 00:34:41
It's going to go into the
dictionary associated with

678
00:34:41 --> 00:34:45
teaching, under the value of
term, and get out a list.

679
00:34:45 --> 00:34:47
And it's going to append
to the end of the

680
00:34:47 --> 00:34:48
list the new subject.


681
00:34:48 --> 00:34:50
So it's going to be stored in
there, is then going to be

682
00:34:50 --> 00:34:53
term, and a list of what I
taught, in case I teach more

683
00:34:53 --> 00:34:55
than one thing each term.


684
00:34:55 --> 00:34:57
It's going to do that,
but notice it's a try.

685
00:34:57 --> 00:35:00
If in fact there is no term
currently in the dictionary,

686
00:35:00 --> 00:35:03
started out empty, it's going
to throw an error, sorry, not

687
00:35:03 --> 00:35:04
throw an error, it's going
to raise an exception.

688
00:35:04 --> 00:35:07
Which is a key error, in which
case notice what I'm going

689
00:35:07 --> 00:35:09
to do, I'm not going to
treat it as an error.

690
00:35:09 --> 00:35:13
I'm simply going to say, in
that case, just start off with

691
00:35:13 --> 00:35:16
an empty, with an initial list
with just that subject in and

692
00:35:16 --> 00:35:18
put it in the dictionary.


693
00:35:18 --> 00:35:21
As I add more things in, I'll
just keep adding things to this

694
00:35:21 --> 00:35:23
dictionary under that term.


695
00:35:23 --> 00:35:25
And if I want to find out what
I'm doing, well I can use get

696
00:35:25 --> 00:35:28
teaching, which says given the
term, find the thing in the

697
00:35:28 --> 00:35:31
dictionary under that
term and return it.

698
00:35:31 --> 00:35:34
If I get an error, I'm going to
raise it, which says there is

699
00:35:34 --> 00:35:35
nothing for that term, and in
that case I guess I'm just

700
00:35:35 --> 00:35:37
going to return none.


701
00:35:37 --> 00:35:39
OK?


702
00:35:39 --> 00:35:41
And then the other two pieces
we're going to have here, and

703
00:35:41 --> 00:35:43
we want to look at a little
more carefully, I just wanted

704
00:35:43 --> 00:35:51
to show you that example, is a
professor can lecture, and a

705
00:35:51 --> 00:35:54
professor can say something.


706
00:35:54 --> 00:35:56
Look at the say method, because
this now add one more nuance

707
00:35:56 --> 00:35:59
to what we want to do here.


708
00:35:59 --> 00:36:00
And I think in interest of
making this go, let me

709
00:36:00 --> 00:36:03
actually, since I'm not going
to get my machine to do this

710
00:36:03 --> 00:36:14
right, let me create a
couple of professors.

711
00:36:14 --> 00:36:18
If I look at what that is, it's
an MIT person because I didn't

712
00:36:18 --> 00:36:21
have any separate string thing
there, and we will create a

713
00:36:21 --> 00:36:29
more important professor.


714
00:36:29 --> 00:36:30
What rank do you want, John?


715
00:36:30 --> 00:36:31
Do you want to stay full?


716
00:36:31 --> 00:36:33
PROFESSOR 2: Undergraduate.


717
00:36:33 --> 00:36:37
PROFESSOR: Undergraduate,
right, a lot more fun I agree.

718
00:36:37 --> 00:36:38
Sorry about that, and
we can again just see

719
00:36:38 --> 00:36:40
what that looks like.


720
00:36:40 --> 00:36:44
And that of course, we'll print
out, he's also an MIT person.

721
00:36:44 --> 00:36:46
But now here's what
I want to do.

722
00:36:46 --> 00:36:48
I want to say something
to my good colleague

723
00:36:48 --> 00:36:50
Professor Guttag.


724
00:36:50 --> 00:36:51
Actually I'm going to start a
separate -- I'm going to say

725
00:36:51 --> 00:36:53
something to a smart
undergraduate.

726
00:36:53 --> 00:37:08
So if I say, remember we have
ug defined as an undergraduate,

727
00:37:08 --> 00:37:11
let me do something a
little different here.

728
00:37:11 --> 00:37:20
Well let, me do it that way.


729
00:37:20 --> 00:37:24
It says, I don't understand why
you say you were enjoying 6.00.

730
00:37:24 --> 00:37:29
Not a good thing to say, right,
but if I say to my good

731
00:37:29 --> 00:37:33
colleague Professor Guttag.


732
00:37:33 --> 00:37:35
I have to spell say right,
I know, I need help with

733
00:37:35 --> 00:37:44
this, what can I say?


734
00:37:44 --> 00:37:45
We flatter each
other all the time.

735
00:37:45 --> 00:37:47
It's part of what makes us
feel good about ourselves.

736
00:37:47 --> 00:37:48
Why is the sky blue?


737
00:37:48 --> 00:37:51
I enjoyed your paper, but
why is the sky blue?

738
00:37:51 --> 00:37:55
OK, terrible examples, but
what's going on here?

739
00:37:55 --> 00:37:56
One more piece that
I want to add.

740
00:37:56 --> 00:38:00
Here's my say method for
professor, and now I'm actually

741
00:38:00 --> 00:38:03
taking advantage of to whom
I am saying something.

742
00:38:03 --> 00:38:04
Notice again, what does it do?


743
00:38:04 --> 00:38:06
There's the self argument,
that's just pointing

744
00:38:06 --> 00:38:08
to the instance of me.


745
00:38:08 --> 00:38:11
I'm passing in another
argument, going to call it to

746
00:38:11 --> 00:38:14
who, in one case it was ug, in
one case it was Guttag.

747
00:38:14 --> 00:38:16
And then the thing I want to
say, ah, look what it does,

748
00:38:16 --> 00:38:19
it says, check the type.


749
00:38:19 --> 00:38:22
And the type is going to take
that instance, I had an

750
00:38:22 --> 00:38:25
instance, for example, of a
professor down here, and it's

751
00:38:25 --> 00:38:28
going to pick up what
type of object it is.

752
00:38:28 --> 00:38:34
So if the type of the person
I'm speaking to is undergrad,

753
00:38:34 --> 00:38:35
let's pause for second.


754
00:38:35 --> 00:38:37
Remember I started away
back saying we're building

755
00:38:37 --> 00:38:39
abstract data types.


756
00:38:39 --> 00:38:41
Well, here's a great
example of how I'm using

757
00:38:41 --> 00:38:42
exactly that, right?


758
00:38:42 --> 00:38:45
I've got int, I've got float,
I now have ug, it's a type.

759
00:38:45 --> 00:38:49
So it's says if the object
to whom I'm speaking is an

760
00:38:49 --> 00:38:53
undergrad, then use the same
method from person where I'm

761
00:38:53 --> 00:38:55
going to put this on the front.


762
00:38:55 --> 00:38:57
On the other hand, if the
object to whom I'm speaking is

763
00:38:57 --> 00:39:00
a professor, then I'm going to
tag this on the front and use

764
00:39:00 --> 00:39:01
the underlying say method.


765
00:39:01 --> 00:39:05
On the other hand, if I'm
speaking to somebody else, I'm

766
00:39:05 --> 00:39:06
just going to go lecture.


767
00:39:06 --> 00:39:09
All right, and when a professor
lectures, they just put it's

768
00:39:09 --> 00:39:13
obvious on the end of things,
as you may have noticed.

769
00:39:13 --> 00:39:14
What's the point I
want you to see here?

770
00:39:14 --> 00:39:18
I'm now using the instances
to help me to find what

771
00:39:18 --> 00:39:20
the code should do.


772
00:39:20 --> 00:39:21
I'm looking at the type.


773
00:39:21 --> 00:39:22
If the type is this, do that.


774
00:39:22 --> 00:39:24
If the type is this, do
something different, ok?

775
00:39:24 --> 00:39:28
And I can now sort of
build those pieces up.

776
00:39:28 --> 00:39:31
OK, I said one more class.


777
00:39:31 --> 00:39:32
Notice what we're doing.


778
00:39:32 --> 00:39:35
I know they're silly examples,
but, sorry, they are cleverly

779
00:39:35 --> 00:39:37
designed examples to
highlight key points.

780
00:39:37 --> 00:39:41
What I'm trying to do is show
you how we have methods inherit

781
00:39:41 --> 00:39:43
methods, how have message
shadow methods, how we have

782
00:39:43 --> 00:39:46
methods override methods, how
we can use instances as types

783
00:39:46 --> 00:39:49
to define what the
method should do.

784
00:39:49 --> 00:39:52
Let me show you one last class,
because I'm gonna have one more

785
00:39:52 --> 00:39:53
piece that we want to use.


786
00:39:53 --> 00:39:57
And the last class is, sort
of, once you've got a set

787
00:39:57 --> 00:40:00
of professors, you can
have an aggregate of them.

788
00:40:00 --> 00:40:02
And I don't know, if a group
of geese are gaggle, I

789
00:40:02 --> 00:40:05
don't know what a set of
professors are, John.

790
00:40:05 --> 00:40:05
Flamers?


791
00:40:05 --> 00:40:07
I, you know, we've got to
figure out what the right

792
00:40:07 --> 00:40:08
collective noun here is.


793
00:40:08 --> 00:40:10
We're going to call them
a faculty for lack of

794
00:40:10 --> 00:40:12
a better term, right?


795
00:40:12 --> 00:40:14
Now the reason I want to show
you this example is, this

796
00:40:14 --> 00:40:18
class, notice, it only is
going to inherit from object.

797
00:40:18 --> 00:40:19
It actually makes sense.


798
00:40:19 --> 00:40:21
This is going to be a
collection of things, but

799
00:40:21 --> 00:40:24
it's not a subclass of a
particular kind of person.

800
00:40:24 --> 00:40:28
And what I want the faculty to
do, is to be able to gather

801
00:40:28 --> 00:40:31
together a set of faculty.


802
00:40:31 --> 00:40:35
So if I go down here, grab
this for second, and pull

803
00:40:35 --> 00:40:38
it down so you can see it.


804
00:40:38 --> 00:40:39
It looks like I'm not going to
be able to run this because my

805
00:40:39 --> 00:40:42
machine is broken, but
basically I'm gonna define a

806
00:40:42 --> 00:40:45
set of professors, and then
I'm gonna create a new

807
00:40:45 --> 00:40:47
class called faculty.


808
00:40:47 --> 00:40:48
There's the definition of it.


809
00:40:48 --> 00:40:50
It's got an init.


810
00:40:50 --> 00:40:51
You can kind of
see what it does.

811
00:40:51 --> 00:40:54
It's going to set up an
internal variable called names,

812
00:40:54 --> 00:40:57
which is initially an empty
list, internal variable called

813
00:40:57 --> 00:40:59
ids, which is empty, an
internal variable called

814
00:40:59 --> 00:41:02
members, which is empty, and
another special variable called

815
00:41:02 --> 00:41:04
place, which we're going to
come back to in a second,

816
00:41:04 --> 00:41:06
initially bound to none.


817
00:41:06 --> 00:41:09
OK, I've got a method called
add which I'm going to use

818
00:41:09 --> 00:41:13
down here to add professors
to the course 6 faculty.

819
00:41:13 --> 00:41:16
Here's what I want
to add to do.

820
00:41:16 --> 00:41:19
First of all, notice I'm
going to check the type.

821
00:41:19 --> 00:41:25
If this is not a professor, I'm
gonna raise an error, a type

822
00:41:25 --> 00:41:26
error, it's the wrong type
of object to pass in.

823
00:41:26 --> 00:41:30
The second thing I'm gonna
do is say, if that's okay,

824
00:41:30 --> 00:41:32
then let me go off and
get the id number.

825
00:41:32 --> 00:41:36
Now remember, that's right
up here, so I'm asking the

826
00:41:36 --> 00:41:39
instance of the professor to
go up and get the id number.

827
00:41:39 --> 00:41:42
And I want to make sure I only
have one instance of each

828
00:41:42 --> 00:41:46
professor in my faculty, so if
the id number is in the list of

829
00:41:46 --> 00:41:51
ids already, I'm going to raise
an error, sorry, raise an

830
00:41:51 --> 00:41:54
exception as well, saying
I've got a duplicate id.

831
00:41:54 --> 00:41:54
OK?


832
00:41:54 --> 00:41:56
And the reason that's going
to come up is, notice

833
00:41:56 --> 00:41:57
what I do now.


834
00:41:57 --> 00:42:01
Inside of the instant self, I
take the variable names and I

835
00:42:01 --> 00:42:06
add to it the family name of
the person I just added.

836
00:42:06 --> 00:42:07
OK, notice the form.


837
00:42:07 --> 00:42:10
I'm using the method, there's
the parens to get the

838
00:42:10 --> 00:42:11
family name of the person.


839
00:42:11 --> 00:42:13
I'm just adding it to the list.


840
00:42:13 --> 00:42:15
I've got the id number, I've
added the ids, and I add the

841
00:42:15 --> 00:42:18
object itself into members.


842
00:42:18 --> 00:42:20
So as I do this,
what am I doing?

843
00:42:20 --> 00:42:24
I'm creating a list, actually
several lists: a list of ids, a

844
00:42:24 --> 00:42:28
list of the actual instances,
and a list of the family names.

845
00:42:28 --> 00:42:31
And as a cost I want to add,
that's why I can check and see,

846
00:42:31 --> 00:42:33
is this in here already or not?


847
00:42:33 --> 00:42:36
Now, the last reason I want to
do this is, I want to be able

848
00:42:36 --> 00:42:58
to support things like that.


849
00:42:58 --> 00:43:03
This is now different, right,
this instance is a collection.

850
00:43:03 --> 00:43:05
I want to be able to do things
like, for all the things in

851
00:43:05 --> 00:43:07
that collection, do something,
like print out the

852
00:43:07 --> 00:43:08
family names.


853
00:43:08 --> 00:43:18
And to do that, I need two
special forms: iter and next.

854
00:43:18 --> 00:43:23
OK, now let me see if I
can say this cleanly.

855
00:43:23 --> 00:43:27
Whenever I use a for, in
structure, even if it was on

856
00:43:27 --> 00:43:30
just a normal list you built,
what Python is doing is

857
00:43:30 --> 00:43:32
returning an, what is
called an iterator.

858
00:43:32 --> 00:43:34
Which is something that
we talked earlier.

859
00:43:34 --> 00:43:37
It's keeping track of where
are you in the list,

860
00:43:37 --> 00:43:40
and how do I get to the
next thing in the list?

861
00:43:40 --> 00:43:42
I'm going to do the same thing
here, and I'm going to create

862
00:43:42 --> 00:43:43
it for this particular
structure.

863
00:43:43 --> 00:43:50
So this little thing iter, when
I call a for something in, one

864
00:43:50 --> 00:43:53
of these instances, it calls
iter, and notice what it does.

865
00:43:53 --> 00:43:55
It initializes place to 0.


866
00:43:55 --> 00:43:56
That was that variable
I had up there.

867
00:43:56 --> 00:43:59
That's basically saying I'm at
the beginning of the list.

868
00:43:59 --> 00:44:01
It's a pointer to the
beginning of the list,

869
00:44:01 --> 00:44:04
and it returns self.


870
00:44:04 --> 00:44:07
Just gives me back a
pointer to the instance.

871
00:44:07 --> 00:44:11
That now allows me at each step
in that loop to call next.

872
00:44:11 --> 00:44:13
And what does next do?


873
00:44:13 --> 00:44:18
Next says, check to see if that
value is too long, if it's

874
00:44:18 --> 00:44:21
longer than, for example, the
list of names, raise an

875
00:44:21 --> 00:44:24
exception called stop
iteration, which the for loop

876
00:44:24 --> 00:44:25
will use to say OK, I'm done.


877
00:44:25 --> 00:44:28
I'm going to break
out of the for loop.

878
00:44:28 --> 00:44:30
Otherwise, what am
I going to do?

879
00:44:30 --> 00:44:33
I'll increment place by 1,
that's going to move me to the

880
00:44:33 --> 00:44:35
next place in the list, and
then in this case I'll just

881
00:44:35 --> 00:44:38
return the instance
itself, right?

882
00:44:38 --> 00:44:41
Members is a list of instances,
place I've incremented by 1, I

883
00:44:41 --> 00:44:43
take 1 off of it, I get to it.


884
00:44:43 --> 00:44:45
So iter and next work together.


885
00:44:45 --> 00:44:49
Iter creates this method,
that's going to give you a

886
00:44:49 --> 00:44:52
pointer to the place in the
structure, and then next

887
00:44:52 --> 00:44:54
literally walks along the
structure giving you the next

888
00:44:54 --> 00:44:57
element and returning elements
in turn so you can do

889
00:44:57 --> 00:44:59
something with it.


890
00:44:59 --> 00:45:01
Right, so now what that says
is, I can have classes that

891
00:45:01 --> 00:45:03
just have local variables.


892
00:45:03 --> 00:45:06
I can have classes that get
methods from other variables,

893
00:45:06 --> 00:45:09
and I can also have classes
that are collections.

894
00:45:09 --> 00:45:12
And I've supported that by
adding in this last piece.

895
00:45:12 --> 00:45:17
OK once you have all of that,
in principle we could start

896
00:45:17 --> 00:45:19
doing some fun things.


897
00:45:19 --> 00:45:22
So let's see what happens if we
try and make all of this go.

898
00:45:22 --> 00:45:24
And let me, since I'm not going
to be able to run it, let

899
00:45:24 --> 00:45:29
me simply do it this way.


900
00:45:29 --> 00:45:35
If I have my undergraduate, ug.


901
00:45:35 --> 00:45:39
I can -- sorry, let's not do
it that way -- I can have

902
00:45:39 --> 00:45:53
undergraduate say things
like -- all right, what

903
00:45:53 --> 00:45:54
did I just do wrong here?


904
00:45:54 --> 00:45:55
Do I not have
undergrad defined?

905
00:45:55 --> 00:46:00
I do.


906
00:46:00 --> 00:46:02
Oh, I didn't have Grimson,
sorry, it's me, isn't it?

907
00:46:02 --> 00:46:03
Thank you.


908
00:46:03 --> 00:46:13
The undergraduate very
politely asks why he didn't

909
00:46:13 --> 00:46:32
understand, you can have
the professor respond.

910
00:46:32 --> 00:46:35
Again, it simply puts a
different thing into there.

911
00:46:35 --> 00:46:42
On the other hand, if Professor
Guttag asks me something about

912
00:46:42 --> 00:46:50
understanding, I say I really
like this paper on, you do not

913
00:46:50 --> 00:46:53
understand, it's a deep paper
on programming languages 5,

914
00:46:53 --> 00:46:55
I think, John, isn't it?


915
00:46:55 --> 00:46:56
What else can you do
with this thing, right?

916
00:46:56 --> 00:46:59
You can have an undergraduate
talk to an undergraduate, in

917
00:46:59 --> 00:47:01
which case they're
still polite.

918
00:47:01 --> 00:47:03
Or you could have -- sorry, let
me do that the other way -- you

919
00:47:03 --> 00:47:05
could also have an
undergraduate simply talk

920
00:47:05 --> 00:47:16
to a normal person.


921
00:47:16 --> 00:47:18
All right, but the good news is
you know eventually you get it

922
00:47:18 --> 00:47:20
done, and when you're really
done you can have the

923
00:47:20 --> 00:47:24
undergraduate be really happy
about this, and so she

924
00:47:24 --> 00:47:36
sings to herself.


925
00:47:36 --> 00:47:39
OK it's a little silly,
but notice what we've

926
00:47:39 --> 00:47:39
just illustrated.


927
00:47:39 --> 00:47:43
And this is where I want
to pull it together.

928
00:47:43 --> 00:47:48
With a simple set of classes,
and the following abilities,

929
00:47:48 --> 00:47:51
an ability to inherit methods
from subclasses, sorry from

930
00:47:51 --> 00:47:54
superclasses, that is having
this hierarchy of things.

931
00:47:54 --> 00:47:58
I can create a fairly complex
kind of interaction.

932
00:47:58 --> 00:48:02
I can take advantage of the
types of the objects to

933
00:48:02 --> 00:48:04
help me decide what to do.


934
00:48:04 --> 00:48:06
And if you think about that,
I know it sounds very

935
00:48:06 --> 00:48:08
straightforward, but you would
do exactly that if you were

936
00:48:08 --> 00:48:11
writing earlier code to deal
with some numerical problem.

937
00:48:11 --> 00:48:13
All right, if the thing is an
integer, do this, if it's a

938
00:48:13 --> 00:48:16
float, do that, if it's a
string, do something else.

939
00:48:16 --> 00:48:19
I'm now giving you exactly the
same ability, but the types now

940
00:48:19 --> 00:48:21
can be things that
you could create.

941
00:48:21 --> 00:48:24
And what I've also got is
now the ability to inherit

942
00:48:24 --> 00:48:26
those methods as they
go up the chain.

943
00:48:26 --> 00:48:29
So another way of saying it is,
things that you want to come

944
00:48:29 --> 00:48:39
away from here, are, in
terms of these classes.

945
00:48:39 --> 00:48:41
We now have this idea
of encapsulation.

946
00:48:41 --> 00:48:44
I'm gathering together data
that naturally belongs as a

947
00:48:44 --> 00:48:47
unit, and I'm gathering
together with it methods

948
00:48:47 --> 00:48:48
that apply to that unit.


949
00:48:48 --> 00:48:51
Just like we would have
done with float or int.

950
00:48:51 --> 00:48:54
Ideally, we data hide, we
don't happen to do it

951
00:48:54 --> 00:48:55
here, which is too bad.


952
00:48:55 --> 00:48:58
Basically we've got the
idea of encapsulation.

953
00:48:58 --> 00:49:06
The second thing we've got is
this idea of inheritance.

954
00:49:06 --> 00:49:09
Inheritance both meaning
I can inherit attributes

955
00:49:09 --> 00:49:10
or field values.


956
00:49:10 --> 00:49:13
I can inherit methods by
moving up the chain.

957
00:49:13 --> 00:49:22
I can also the shadow or
override methods, so

958
00:49:22 --> 00:49:24
that I can specialise.


959
00:49:24 --> 00:49:35
And I do all of that with this
nice hierarchy of classes.

960
00:49:35 --> 00:49:38
So what hopefully you've seen,
between these two lectures, and

961
00:49:38 --> 00:49:40
we're going to come back to it
in some subsequent lectures, is

962
00:49:40 --> 00:49:42
that this is now a different
way of just structuring

963
00:49:42 --> 00:49:45
a computational system.


964
00:49:45 --> 00:49:48
Now, you'll also get arguments,
polite arguments from faculty

965
00:49:48 --> 00:49:50
members or other experts about
which is a better

966
00:49:50 --> 00:49:51
way of doing it.


967
00:49:51 --> 00:49:54
So I'll give you my bias,
Professor Guttag will give you

968
00:49:54 --> 00:49:55
his bias next time around.


969
00:49:55 --> 00:49:58
My view, object-oriented system
are great when you're trying to

970
00:49:58 --> 00:50:02
model systems that consist of
a large number of units that

971
00:50:02 --> 00:50:05
interact in very specific ways.


972
00:50:05 --> 00:50:07
So, modeling a system of
people's a great idea.

973
00:50:07 --> 00:50:09
Modeling a system of molecules
is probably a great idea.

974
00:50:09 --> 00:50:13
Modeling a system where it is
natural to associate things

975
00:50:13 --> 00:50:15
together and where the number
of interactions between

976
00:50:15 --> 00:50:17
them is very controlled.


977
00:50:17 --> 00:50:18
These systems work really well.


978
00:50:18 --> 00:50:21
And we'll see some examples
of that next week.

979
00:50:21 --> 00:50:22
Thanks.


