1
00:00:00 --> 00:00:00



2
00:00:00 --> 00:00:02
The following content is
provided under a Creative

3
00:00:02 --> 00:00:03
Commons license.


4
00:00:03 --> 00:00:06
Your support will help MIT
OpenCourseware continue to

5
00:00:06 --> 00:00:10
offer high-quality educational
resources for free.

6
00:00:10 --> 00:00:13
To make a donation, or view
additional materials from

7
00:00:13 --> 00:00:17
hundreds of MIT courses,
visit MIT OpenCourseware,

8
00:00:17 --> 00:00:17
at ocw.mit.edu.


9
00:00:17 --> 00:00:18
PROFESSOR: Good morning.


10
00:00:18 --> 00:00:19
Try it again.


11
00:00:19 --> 00:00:22
Good morning.


12
00:00:22 --> 00:00:25
STUDENTS: Good morning.


13
00:00:25 --> 00:00:27
PROFESSOR: Thank you.


14
00:00:27 --> 00:00:31
This is 6.00, also known as
Introduction to Computer

15
00:00:31 --> 00:00:32
Science and Programming.


16
00:00:32 --> 00:00:35
My name is Eric Grimson, I have
together Professor John Guttag

17
00:00:35 --> 00:00:39
over here, we're going to be
lecturing the course this term.

18
00:00:39 --> 00:00:41
I want to give you a heads up;
you're getting some serious

19
00:00:41 --> 00:00:43
firepower this term.


20
00:00:43 --> 00:00:48
John was department head for
ten years, felt like a century,

21
00:00:48 --> 00:00:50
and in course six, I'm
the current department

22
00:00:50 --> 00:00:51
head in course six.


23
00:00:51 --> 00:00:55
John's been lecturing for
thirty years, roughly.

24
00:00:55 --> 00:00:58
All right, I'm the young guy,
I've only been lecturing

25
00:00:58 --> 00:00:59
for twenty-five years.


26
00:00:59 --> 00:01:03
You can tell, I have less
grey hair than he does.

27
00:01:03 --> 00:01:05
What I'm trying to say
to you is, we take this

28
00:01:05 --> 00:01:07
course really seriously.


29
00:01:07 --> 00:01:08
We hope you do as well.


30
00:01:08 --> 00:01:10
But we think it's really
important for the department

31
00:01:10 --> 00:01:13
to help everybody learn about
computation, and that's

32
00:01:13 --> 00:01:16
what this course is about.


33
00:01:16 --> 00:01:19
What I want to do today is
three things: I'm going to

34
00:01:19 --> 00:01:22
start-- actually, I shouldn't
say start, I'm going to do a

35
00:01:22 --> 00:01:24
little bit of administrivia,
the kinds of things you need

36
00:01:24 --> 00:01:26
to know about how we're
going to run the course.

37
00:01:26 --> 00:01:30
I want to talk about the goal
of the course, what it is

38
00:01:30 --> 00:01:32
you'll be able to do at the end
of this course when you get

39
00:01:32 --> 00:01:36
through it, and then I want to
begin talking about the

40
00:01:36 --> 00:01:39
concepts and tools of
computational thinking, which

41
00:01:39 --> 00:01:41
is what we're primarily
going to focus on here.

42
00:01:41 --> 00:01:43
We're going to try and help you
learn how to think like a

43
00:01:43 --> 00:01:45
computer scientist, and we're
going to begin talking about

44
00:01:45 --> 00:01:47
that towards the end of this
lecture and of course

45
00:01:47 --> 00:01:50
throughout the rest of the
lectures that carry on.

46
00:01:50 --> 00:01:52
Right, let's start
with the goals.

47
00:01:52 --> 00:01:55
I'm going to give you
goals in two levels.

48
00:01:55 --> 00:01:58
The strategic goals are the
following: we want to help

49
00:01:58 --> 00:02:02
prepare freshmen and sophomores
who are interested in majoring

50
00:02:02 --> 00:02:05
in course six to get an easy
entry into the department,

51
00:02:05 --> 00:02:07
especially for those students
who don't have a lot of prior

52
00:02:07 --> 00:02:09
programming experience.


53
00:02:09 --> 00:02:11
If you're in that category,
don't panic, you're

54
00:02:11 --> 00:02:12
going to get it.


55
00:02:12 --> 00:02:15
We're going to help you ramp in
and you'll certainly be able to

56
00:02:15 --> 00:02:17
start the course six curriculum
and do just fine and

57
00:02:17 --> 00:02:20
still finish on target.


58
00:02:20 --> 00:02:23
We don't expect everybody to be
a course six major, contrary to

59
00:02:23 --> 00:02:26
popular opinion, so for those
are you not in that category,

60
00:02:26 --> 00:02:28
the second thing we want to do
is we want to help students who

61
00:02:28 --> 00:02:32
don't plan to major in course
six to feel justifiably

62
00:02:32 --> 00:02:35
confident in their ability to
write and read small

63
00:02:35 --> 00:02:37
pieces of code.


64
00:02:37 --> 00:02:40
For all students, what we want
to do is we want to give you

65
00:02:40 --> 00:02:44
an understanding of the role
computation can and cannot play

66
00:02:44 --> 00:02:47
in tackling technical problems.


67
00:02:47 --> 00:02:49
So that you will come away with
a sense of what you can do,

68
00:02:49 --> 00:02:52
what you can't do, and what
kinds of things you should use

69
00:02:52 --> 00:02:54
to tackle complex problems.


70
00:02:54 --> 00:02:56
And finally, we want to
position all students so that

71
00:02:56 --> 00:03:00
you can easily, if you like,
compete for things like your

72
00:03:00 --> 00:03:02
office and summer jobs.


73
00:03:02 --> 00:03:04
Because you'll have an
appropriate level of confidence

74
00:03:04 --> 00:03:07
and competence in your ability
to do computational

75
00:03:07 --> 00:03:08
problem solving.


76
00:03:08 --> 00:03:10
Those are the strategic goals.


77
00:03:10 --> 00:03:15
Now, this course is primarily
aimed at students who

78
00:03:15 --> 00:03:19
have little or no prior
programming experience.

79
00:03:19 --> 00:03:21
As a consequence, we believe
that no student here is

80
00:03:21 --> 00:03:24
under-qualified for this
course: you're all MIT

81
00:03:24 --> 00:03:26
students, you're all
qualified to be here.

82
00:03:26 --> 00:03:29
But we also hope that there
aren't any students here who

83
00:03:29 --> 00:03:31
are over-qualified
for this course.

84
00:03:31 --> 00:03:32
And what do I mean by that?


85
00:03:32 --> 00:03:37
If you've done a lot prior
programming, this is probably

86
00:03:37 --> 00:03:40
not the best course for you,
and if you're in that category,

87
00:03:40 --> 00:03:43
I would please encourage you to
talk to John or I after class

88
00:03:43 --> 00:03:46
about what your goals are, what
kind of experience you have,

89
00:03:46 --> 00:03:48
and how we might find you a
course that better

90
00:03:48 --> 00:03:51
meets your goals.


91
00:03:51 --> 00:03:54
Second reason we don't want
over-qualified students in the

92
00:03:54 --> 00:03:56
class, it sounds a little
nasty, but the second reason

93
00:03:56 --> 00:03:59
is, an over-qualified student,
somebody who's, I don't know,

94
00:03:59 --> 00:04:03
programmed for Google for the
last five years, is going to

95
00:04:03 --> 00:04:05
have an easy time in this
course, but we don't want

96
00:04:05 --> 00:04:08
such a student accidentally
intimidating the rest of you.

97
00:04:08 --> 00:04:11
We don't want you to feel
inadequate when you're

98
00:04:11 --> 00:04:13
simply inexperienced.


99
00:04:13 --> 00:04:16
And so, it really is a course
aimed at students with little

100
00:04:16 --> 00:04:18
or no prior programming
experience.

101
00:04:18 --> 00:04:20
And again, if you're not in
that category, talk to John

102
00:04:20 --> 00:04:22
or I after class, and we'll
help you figure out where

103
00:04:22 --> 00:04:24
you might want to go.


104
00:04:24 --> 00:04:24
OK.


105
00:04:24 --> 00:04:26
Those are the top-level
goals of the course.

106
00:04:26 --> 00:04:29
Let's talk sort of at a more
tactical level, about what do

107
00:04:29 --> 00:04:31
we want you to know
in this course.

108
00:04:31 --> 00:04:33
What we want you to be able
to do by the time you

109
00:04:33 --> 00:04:34
leave this course?


110
00:04:34 --> 00:04:41
So here are the skills that we
would like you to acquire.

111
00:04:41 --> 00:04:44
Right, the first skill we want
you to acquire, is we want you

112
00:04:44 --> 00:04:47
to be able to use the basic
tools of computational thinking

113
00:04:47 --> 00:04:49
to write small scale programs.


114
00:04:49 --> 00:04:51
I'm going to keep coming back
to that idea, but I'm going to

115
00:04:51 --> 00:04:57
call it computational thinking.


116
00:04:57 --> 00:05:00
And that's so you can write
small pieces of code.

117
00:05:00 --> 00:05:02
And small is not derogatory
here, by the way, it just says

118
00:05:02 --> 00:05:05
the size of things you're
going to be able to do.

119
00:05:05 --> 00:05:08
Second skill we want you to
have at the end of this course

120
00:05:08 --> 00:05:10
is the ability to use a
vocabulary of computational

121
00:05:10 --> 00:05:13
tools in order to be able to
understand programs

122
00:05:13 --> 00:05:15
written by others.


123
00:05:15 --> 00:05:16
So you're going to be able
to write, you're going

124
00:05:16 --> 00:05:19
to be able to read.


125
00:05:19 --> 00:05:24
This latter skill, by the
way, is incredibly valuable.

126
00:05:24 --> 00:05:26
Because you won't want to do
everything from scratch

127
00:05:26 --> 00:05:28
yourself, you want to be able
to look at what is being

128
00:05:28 --> 00:05:31
created by somebody else and
understand what is inside of

129
00:05:31 --> 00:05:32
there, whether it works
correctly and how you

130
00:05:32 --> 00:05:34
can build on it.


131
00:05:34 --> 00:05:36
This is one of the few
places where plagiarism

132
00:05:36 --> 00:05:37
is an OK thing.


133
00:05:37 --> 00:05:40
It's not bad to, if you like,
learn from the skills of others

134
00:05:40 --> 00:05:42
in order to create something
you want to write.

135
00:05:42 --> 00:05:44
Although we'll come back
to plagiarism as a

136
00:05:44 --> 00:05:46
bad thing later on.


137
00:05:46 --> 00:05:48
Third thing we want you to
do, is to understand the

138
00:05:48 --> 00:05:52
fundamental both capabilities
and limitations of

139
00:05:52 --> 00:05:55
computations, and the costs
associated with them.

140
00:05:55 --> 00:05:57
And that latter statement
sounds funny, you don't think

141
00:05:57 --> 00:05:59
of computations having
limits, but they do.

142
00:05:59 --> 00:06:01
There're some things that
cannot be computed.

143
00:06:01 --> 00:06:03
We want you to understand
where those limits are.

144
00:06:03 --> 00:06:05
So you're going to be
able to understand

145
00:06:05 --> 00:06:15
abilities and limits.


146
00:06:15 --> 00:06:18
And then, finally, the last
tactical skill that you're

147
00:06:18 --> 00:06:19
going to get out of this course
is you're going to have the

148
00:06:19 --> 00:06:22
ability to map scientific
problems into a

149
00:06:22 --> 00:06:24
computational frame.


150
00:06:24 --> 00:06:26
So you're going to be able
to take a description of

151
00:06:26 --> 00:06:37
a problem and map it into
something computational.

152
00:06:37 --> 00:06:41
Now if you think about it, boy,
it sounds like grammar school.

153
00:06:41 --> 00:06:43
We're going to teach you to
read, we're going to teach you

154
00:06:43 --> 00:06:46
to write, we're going to teach
you to understand what you can

155
00:06:46 --> 00:06:49
and cannot do, and most
importantly, we're going to try

156
00:06:49 --> 00:06:53
and give you the start of an
ability to take a description

157
00:06:53 --> 00:06:55
of a problem from some other
domain, and figure out how to

158
00:06:55 --> 00:06:58
map it into that domain of
computation so you can do

159
00:06:58 --> 00:07:01
the reading and writing
that you want to do.

160
00:07:01 --> 00:07:03
OK, in a few minutes we're
going to start talking then

161
00:07:03 --> 00:07:05
about what is computation, how
are we going to start building

162
00:07:05 --> 00:07:07
those tools, but that's what
you should take away, that's

163
00:07:07 --> 00:07:09
what you're going to gain out
of this course by the

164
00:07:09 --> 00:07:11
time you're done.


165
00:07:11 --> 00:07:14
Now, let me take a sidebar for
about five minutes to talk

166
00:07:14 --> 00:07:17
about course administration,
the administrivia, things that

167
00:07:17 --> 00:07:18
we're going to do in the
course, just so you know

168
00:07:18 --> 00:07:20
what the rules are.


169
00:07:20 --> 00:07:24
Right, so, class is two
hours of lecture a week.

170
00:07:24 --> 00:07:26
You obviously know where
and you know when,

171
00:07:26 --> 00:07:27
because you're here.


172
00:07:27 --> 00:07:29
Tuesdays and
Thursdays at 11:00.

173
00:07:29 --> 00:07:32
One hour of recitation a week,
on Fridays, and we'll come back

174
00:07:32 --> 00:07:34
in a second to how you're
going to get set up for that.

175
00:07:34 --> 00:07:38
And nine hours a week of
outside-the-class work.

176
00:07:38 --> 00:07:41
Those nine hours are going to
be primarily working on problem

177
00:07:41 --> 00:07:43
sets, and all the problems
sets are going to involve

178
00:07:43 --> 00:07:45
programming in Python, which is
the language we're going

179
00:07:45 --> 00:07:48
to be using this term.


180
00:07:48 --> 00:07:50
Now, one of the things you're
going to see is the first

181
00:07:50 --> 00:07:51
problem sets are pretty easy.


182
00:07:51 --> 00:07:52
Actually, that's probably
wrong, John, right?

183
00:07:52 --> 00:07:54
They're very easy.


184
00:07:54 --> 00:07:55
And we're going to ramp up.


185
00:07:55 --> 00:07:57
By the time you get to the end
of the term, you're going to be

186
00:07:57 --> 00:07:59
dealing with some fairly
complex things, so one of the

187
00:07:59 --> 00:08:01
things you're going to see is,
we're going to make heavy use

188
00:08:01 --> 00:08:04
of libraries, or code
written by others.

189
00:08:04 --> 00:08:06
It'll allow you to tackle
interesting problems I'll have

190
00:08:06 --> 00:08:11
you to write from scratch, but
it does mean that this skill

191
00:08:11 --> 00:08:13
here is going to be
really valuable.

192
00:08:13 --> 00:08:15
You need to be able to read
that code and understand it,

193
00:08:15 --> 00:08:18
as well as write your own.


194
00:08:18 --> 00:08:19
OK.


195
00:08:19 --> 00:08:20
Two quizzes.


196
00:08:20 --> 00:08:23
During the term, the dates
have already been scheduled.

197
00:08:23 --> 00:08:25
John, I forgot to look them up,
I think it's October 2nd and

198
00:08:25 --> 00:08:29
November 4th, it'll be
on the course website.

199
00:08:29 --> 00:08:31
My point is, go check the
course website, which by

200
00:08:31 --> 00:08:34
the way is right there.


201
00:08:34 --> 00:08:37
If you have, if you know you
have a conflict with one of

202
00:08:37 --> 00:08:40
those quiz dates now, please
see John or I right away.

203
00:08:40 --> 00:08:42
We'll arrange something
ahead of time.

204
00:08:42 --> 00:08:45
But if you-- The reason I'm
saying that is, you know, you

205
00:08:45 --> 00:08:47
know that you're getting
married that day for example,

206
00:08:47 --> 00:08:49
we will excuse you from
the quiz to get married.

207
00:08:49 --> 00:08:51
We'll expect you come right
back to do the quiz by the way,

208
00:08:51 --> 00:08:54
but the-- Boy, tough crowd.


209
00:08:54 --> 00:08:57
All right.


210
00:08:57 --> 00:08:59
If you have a conflict,
please let us know.

211
00:08:59 --> 00:09:03
Second thing is, if you have an
MIT documented special need for

212
00:09:03 --> 00:09:07
taking quizzes, please see
John or I well in advance.

213
00:09:07 --> 00:09:08
At least two weeks
before the quiz.

214
00:09:08 --> 00:09:10
Again, we'll arrange for this,
but you need to give us

215
00:09:10 --> 00:09:13
enough warning so that
we can deal with that.

216
00:09:13 --> 00:09:16
OK, the quizzes are open book.


217
00:09:16 --> 00:09:20
This course is not
about memory.

218
00:09:20 --> 00:09:22
It's not how well you can
memorize facts: in fact, I

219
00:09:22 --> 00:09:24
think both John and I are a
little sensitive to memory

220
00:09:24 --> 00:09:26
tests, given our
age, right John?

221
00:09:26 --> 00:09:28
This is not about how you
memorize things, it's

222
00:09:28 --> 00:09:29
about how you think.


223
00:09:29 --> 00:09:30
So they're open
note, open book.

224
00:09:30 --> 00:09:34
It's really going to test
your ability to think.

225
00:09:34 --> 00:09:38
The grades for the course will
be assigned roughly, and I use

226
00:09:38 --> 00:09:40
the word roughly because we
reserve the right to move these

227
00:09:40 --> 00:09:42
numbers around a little bit,
but basically in the following

228
00:09:42 --> 00:09:46
percentages: 55% of your grade
comes from the problem sets,

229
00:09:46 --> 00:09:48
the other 45% come
from the quizzes.

230
00:09:48 --> 00:09:50
And I should've said there's
two quizzes and a final exam.

231
00:09:50 --> 00:09:52
I forgot, that final exam
during final period.

232
00:09:52 --> 00:09:55
So the quiz percentages
are 10%, 15%, and 20%.

233
00:09:55 --> 00:09:59
Which makes up the other 45%.


234
00:09:59 --> 00:10:00
OK.


235
00:10:00 --> 00:10:02
Other administrivia.


236
00:10:02 --> 00:10:05
Let me just look
through my list here.

237
00:10:05 --> 00:10:07
First problem set, problem set
zero, has already been posted.

238
00:10:07 --> 00:10:09
This is a really easy one.


239
00:10:09 --> 00:10:11
We intend it to be a
really easy problem set.

240
00:10:11 --> 00:10:14
It's basically to get you to
load up Python on your machine

241
00:10:14 --> 00:10:17
and make sure you understand
how to interact with it.

242
00:10:17 --> 00:10:19
The first problem set will be
posted shortly, it's also

243
00:10:19 --> 00:10:23
pretty boring-- somewhat like
my lectures but not John's--

244
00:10:23 --> 00:10:25
and that means, you know, we
want you just to get

245
00:10:25 --> 00:10:26
going on things.


246
00:10:26 --> 00:10:27
Don't worry, we're going to
make them more interesting

247
00:10:27 --> 00:10:28
as you go along.


248
00:10:28 --> 00:10:31
Nonetheless, I want to stress
that none of these problems

249
00:10:31 --> 00:10:33
sets are intended to be lethal.


250
00:10:33 --> 00:10:35
We're not using them to
weed you out, we're using

251
00:10:35 --> 00:10:36
them to help you learn.


252
00:10:36 --> 00:10:39
So if you run into a
problem set that just,

253
00:10:39 --> 00:10:41
you don't get, all right?


254
00:10:41 --> 00:10:43
Seek help.


255
00:10:43 --> 00:10:46
Could be psychiatric
help, could be a TA.

256
00:10:46 --> 00:10:47
I recommend the TA.


257
00:10:47 --> 00:10:50
My point being, please come
and talk to somebody.

258
00:10:50 --> 00:10:53
The problems are set up so
that, if you start down the

259
00:10:53 --> 00:10:55
right path, it should be
pretty straight-forward

260
00:10:55 --> 00:10:56
to work it through.


261
00:10:56 --> 00:11:00
If you start down a plausible
but incorrect path, you can

262
00:11:00 --> 00:11:02
sometimes find yourself stuck
in the weeds somewhere, and we

263
00:11:02 --> 00:11:03
want to bring you back in.


264
00:11:03 --> 00:11:08
So part of the goal here is,
this should not be a grueling,

265
00:11:08 --> 00:11:11
exhausting kind of task, it's
really something that should be

266
00:11:11 --> 00:11:12
helping you learn the material.


267
00:11:12 --> 00:11:15
If you need help, ask
John, myself, or the TAs.

268
00:11:15 --> 00:11:17
That's what we're here for.


269
00:11:17 --> 00:11:18
OK.


270
00:11:18 --> 00:11:21
We're going to run primarily
a paperless subject, that's

271
00:11:21 --> 00:11:23
why the website is there.


272
00:11:23 --> 00:11:24
Please check it, that's
where everything's going

273
00:11:24 --> 00:11:27
to be posted in terms of
things you need to know.

274
00:11:27 --> 00:11:30
In particular, please go to it
today, you will find a form

275
00:11:30 --> 00:11:33
there that you need to fill out
to register for, or sign up

276
00:11:33 --> 00:11:35
for rather, a recitation.


277
00:11:35 --> 00:11:37
Recitations are on Friday.


278
00:11:37 --> 00:11:39
Right now, we have them
scheduled at 9:00, 10:00,

279
00:11:39 --> 00:11:41
11:00, 12:00, 1:00, and 2:00.


280
00:11:41 --> 00:11:45
We may drop one of the
recitations, just depending

281
00:11:45 --> 00:11:46
on course size, all right?


282
00:11:46 --> 00:11:48
So we reserve the right,
unfortunately, to have

283
00:11:48 --> 00:11:49
to move you around.


284
00:11:49 --> 00:11:52
My guess is that 9:00 is not
going to be a tremendously

285
00:11:52 --> 00:11:54
popular time, but maybe
you'll surprise me.

286
00:11:54 --> 00:11:56
Nonetheless, please
go in and sign up.

287
00:11:56 --> 00:11:58
We will let you sign up
for whichever recitation

288
00:11:58 --> 00:11:59
makes sense for you.


289
00:11:59 --> 00:12:02
Again, we reserve the right to
move people around if we have

290
00:12:02 --> 00:12:04
to, just to balance load, but
we want you to find something

291
00:12:04 --> 00:12:08
that fits your schedule
rather than ours.

292
00:12:08 --> 00:12:09
OK.


293
00:12:09 --> 00:12:10
Other things.


294
00:12:10 --> 00:12:12
There is no required text.


295
00:12:12 --> 00:12:17
If you feel exposed without a
text book, you really have to

296
00:12:17 --> 00:12:20
have a textbook, you'll find
one recommended-- actually I'm

297
00:12:20 --> 00:12:22
going to reuse that word,
John, at least suggest it,

298
00:12:22 --> 00:12:24
on the course website.


299
00:12:24 --> 00:12:26
I don't think either of us are
thrilled with the text, it's

300
00:12:26 --> 00:12:28
the best we've probably
found for Python, it's OK.

301
00:12:28 --> 00:12:29
If you need it, it's there.


302
00:12:29 --> 00:12:33
But we're going to basically
not rely on any specific text.

303
00:12:33 --> 00:12:34
Right.


304
00:12:34 --> 00:12:37
Related to that: attendance
here is obviously

305
00:12:37 --> 00:12:38
not mandatory.


306
00:12:38 --> 00:12:40
You ain't in high
school anymore.

307
00:12:40 --> 00:12:42
I think both of us would love
to see your smiling faces, or

308
00:12:42 --> 00:12:44
at least your faces, even if
you're not smiling

309
00:12:44 --> 00:12:46
at us every day.


310
00:12:46 --> 00:12:49
Point I want to make about
this, though, is that we are

311
00:12:49 --> 00:12:52
going to cover a lot of
material that is not in the

312
00:12:52 --> 00:12:53
assigned readings, and we do
have assigned readings

313
00:12:53 --> 00:12:57
associated with each
one of these lectures.

314
00:12:57 --> 00:13:00
If you choose not to show up
today-- or sorry, you did

315
00:13:00 --> 00:13:03
choose to show up today, if you
choose not to show up in future

316
00:13:03 --> 00:13:06
days-- we'll understand, but
please also understand that the

317
00:13:06 --> 00:13:08
TAs won't have a lot of
patience with you if you're

318
00:13:08 --> 00:13:11
asking a question about
something that was either

319
00:13:11 --> 00:13:13
covered in the readings, or
covered in the lecture and is

320
00:13:13 --> 00:13:14
pretty straight forward.


321
00:13:14 --> 00:13:14
All right?


322
00:13:14 --> 00:13:16
We expect you to behave
responsibly and

323
00:13:16 --> 00:13:18
we will as well.


324
00:13:18 --> 00:13:20
All right.


325
00:13:20 --> 00:13:22
I think the last thing I want
to say is, we will not be

326
00:13:22 --> 00:13:26
handing out class notes.


327
00:13:26 --> 00:13:27
Now this sounds like
a draconian measure;

328
00:13:27 --> 00:13:29
let me tell you why.


329
00:13:29 --> 00:13:31
Every study I know of, and I
suspect every one John knows,

330
00:13:31 --> 00:13:35
about learning, stresses
that students learn best

331
00:13:35 --> 00:13:36
when they take notes.


332
00:13:36 --> 00:13:40
Ironically, even if they
never look at them.

333
00:13:40 --> 00:13:40
OK.


334
00:13:40 --> 00:13:44
The process of writing is
exercising both halves of your

335
00:13:44 --> 00:13:46
brain, and it's actually
helping you learn, and so

336
00:13:46 --> 00:13:48
taking notes is really
valuable thing.

337
00:13:48 --> 00:13:50
Therefore we're not going
to distribute notes.

338
00:13:50 --> 00:13:53
What we will distribute for
most lectures is a handout

339
00:13:53 --> 00:13:55
that's mostly code examples
that we're going to do.

340
00:13:55 --> 00:13:57
I don't happen to have one
today because we're not

341
00:13:57 --> 00:13:58
going to do a lot of code.


342
00:13:58 --> 00:13:59
We will in future.


343
00:13:59 --> 00:14:03
Those notes are going to make
no sense, I'm guessing, outside

344
00:14:03 --> 00:14:04
of the lecture, all right?


345
00:14:04 --> 00:14:08
So it's not just, you can swing
by 11:04 and grab a copy and go

346
00:14:08 --> 00:14:10
off and catch some more sleep.


347
00:14:10 --> 00:14:13
What we recommend is you use
those notes to take your own

348
00:14:13 --> 00:14:15
annotations to help you
understand what's going on,

349
00:14:15 --> 00:14:17
but we're not going to
provide class notes.

350
00:14:17 --> 00:14:20
We want you to take your own
notes to help you, if you like,

351
00:14:20 --> 00:14:23
spur your own learning process.


352
00:14:23 --> 00:14:24
All right.


353
00:14:24 --> 00:14:28
And then finally, I want to
stress that John, myself,

354
00:14:28 --> 00:14:32
all of the staff, our job
is to help you learn.

355
00:14:32 --> 00:14:32
That's what we're here for.


356
00:14:32 --> 00:14:35
It's what we get excited about.


357
00:14:35 --> 00:14:37
If you're stuck, if you're
struggling, if you're

358
00:14:37 --> 00:14:40
not certain about
something, please ask.

359
00:14:40 --> 00:14:42
We're not mind readers, we
can't tell when you're

360
00:14:42 --> 00:14:44
struggling, other than sort of
seeing the expression on your

361
00:14:44 --> 00:14:48
face, we need your help
in identifying that.

362
00:14:48 --> 00:14:50
But all of the TAs, many of
whom are sitting down in the

363
00:14:50 --> 00:14:53
front row over here, are here
to help, so come and ask.

364
00:14:53 --> 00:14:56
At the same time, remember
that they're students too.

365
00:14:56 --> 00:14:59
And if you come and ask a
question that you could have

366
00:14:59 --> 00:15:02
easily answered by doing the
reading, coming to lecture, or

367
00:15:02 --> 00:15:05
using Google, they're going
to have less patience.

368
00:15:05 --> 00:15:07
But helping you understand
things that really are a

369
00:15:07 --> 00:15:10
conceptual difficulty is what
they're here for and what

370
00:15:10 --> 00:15:14
we're here for, so please
come and talk to us.

371
00:15:14 --> 00:15:15
OK.


372
00:15:15 --> 00:15:17
That takes care of the
administrivia preamble.

373
00:15:17 --> 00:15:18
John, things we add?


374
00:15:18 --> 00:15:34
PROFESSOR GUTTAG: Two
more quick things.

375
00:15:34 --> 00:15:35
This semester, your class
is being videotaped

376
00:15:35 --> 00:15:35
for OpenCourseware.


377
00:15:35 --> 00:15:36
If any of you don't want your
image recorded and posted on

378
00:15:36 --> 00:15:38
the web, you're supposed to
sit in the back three rows.

379
00:15:38 --> 00:15:39
PROFESSOR GRIMSON:
Ah, thank you.

380
00:15:39 --> 00:15:39
I forgot.


381
00:15:39 --> 00:15:40
PROFESSOR GUTTAG: --Because
the camera may pan.

382
00:15:40 --> 00:15:40
I think you're all very
good-looking and give MIT

383
00:15:40 --> 00:15:40
a good image, so please,
feel free to be filmed.

384
00:15:40 --> 00:15:45
PROFESSOR GRIMSON: I'll turn
around, so if you want to,

385
00:15:45 --> 00:15:48
you know, move to the back,
I won't see who moves.

386
00:15:48 --> 00:15:48
Right.


387
00:15:48 --> 00:15:48
Great.


388
00:15:48 --> 00:15:49
Thank you, John.


389
00:15:49 --> 00:15:57
PROFESSOR GUTTAG: So that,
the other thing I want to

390
00:15:57 --> 00:16:00
mention is, recitations
are also very important.

391
00:16:00 --> 00:16:00
We will be covering material in
recitations that're not in the

392
00:16:00 --> 00:16:03
lectures, not in the reading,
and we do expect you to

393
00:16:03 --> 00:16:03
attend recitations.


394
00:16:03 --> 00:16:04
PROFESSOR GRIMSON: Great.


395
00:16:04 --> 00:16:06
Thanks, John.


396
00:16:06 --> 00:16:08
Any questions about
the administrivia?

397
00:16:08 --> 00:16:10
I know it's boring, but we need
to do it so you know what

398
00:16:10 --> 00:16:12
the ground rules are.


399
00:16:12 --> 00:16:13
Good.


400
00:16:13 --> 00:16:14
OK.


401
00:16:14 --> 00:16:16
Let's talk about computation.


402
00:16:16 --> 00:16:19
As I said, our strategic goal,
our tactical goals, are to

403
00:16:19 --> 00:16:22
help you think like a
computer scientist.

404
00:16:22 --> 00:16:24
Another way of saying it is, we
want to give you the skill so

405
00:16:24 --> 00:16:28
that you can make the computer
do what you want it to do.

406
00:16:28 --> 00:16:30
And we hope that at the end of
the class, every time you're

407
00:16:30 --> 00:16:32
confronted with some technical
problem, one of your first

408
00:16:32 --> 00:16:35
instincts is going to be, "How
do I write the piece of code

409
00:16:35 --> 00:16:37
that's going to help
me solve that?"

410
00:16:37 --> 00:16:40
So we want to help you think
like a computer scientist.

411
00:16:40 --> 00:16:41
All right.


412
00:16:41 --> 00:16:45
And that, is an
interesting statement.

413
00:16:45 --> 00:16:55
What does it mean, to think
like a computer scientist?

414
00:16:55 --> 00:16:59
Well, let's see.


415
00:16:59 --> 00:17:00
The primary knowledge you're
going to take away from this

416
00:17:00 --> 00:17:02
course is this notion of
computational problem solving,

417
00:17:02 --> 00:17:07
this ability to think in
computational modes of thought.

418
00:17:07 --> 00:17:10
And unlike in a lot of
introductory courses, as a

419
00:17:10 --> 00:17:12
consequence, having the
ability to memorize is

420
00:17:12 --> 00:17:13
not going to help you.


421
00:17:13 --> 00:17:16
It's really learning those
notions of the tools

422
00:17:16 --> 00:17:18
that you want to use.


423
00:17:18 --> 00:17:19
What in the world does it
mean to say computational

424
00:17:19 --> 00:17:20
mode of thought?


425
00:17:20 --> 00:17:22
It sounds like a hifalutin
phrase you use when you're

426
00:17:22 --> 00:17:24
trying to persuade
a VC to fund you.

427
00:17:24 --> 00:17:25
Right.


428
00:17:25 --> 00:17:27
So to answer this, we really
have to ask a different

429
00:17:27 --> 00:17:31
question, a related question;
so, what's computation?

430
00:17:31 --> 00:17:32
It's like a strange
statement, right?

431
00:17:32 --> 00:17:35
What is computation?


432
00:17:35 --> 00:17:38
And part of the reason for
putting it up is that I want

433
00:17:38 --> 00:17:42
to, as much as possible, answer
that question by separating

434
00:17:42 --> 00:17:45
out the mechanism, which
is the computer, from

435
00:17:45 --> 00:17:47
computational thinking.


436
00:17:47 --> 00:17:47
Right.


437
00:17:47 --> 00:17:49
The artifact should not
be what's driving this.

438
00:17:49 --> 00:17:50
It should be the notion
of, "What does it mean

439
00:17:50 --> 00:17:53
to do computation?"


440
00:17:53 --> 00:17:56
Now, to answer that, I'm going
to back up one more level.

441
00:17:56 --> 00:17:57
And I'm going to pose what
sounds like a philosophy

442
00:17:57 --> 00:18:01
question, which is, "What is
knowledge?" And you'll see in

443
00:18:01 --> 00:18:02
about two minutes why
I'm going to do this.

444
00:18:02 --> 00:18:04
But I'm going to suggest that
I can divide knowledge into

445
00:18:04 --> 00:18:07
at least two categories.


446
00:18:07 --> 00:18:08
OK, and what is knowledge?


447
00:18:08 --> 00:18:09
And the two categories
I'm going to divide them

448
00:18:09 --> 00:18:19
into are declarative and
imperative knowledge.

449
00:18:19 --> 00:18:20
Right.


450
00:18:20 --> 00:18:22
What in the world is
declarative knowledge?

451
00:18:22 --> 00:18:25
Think of it as
statements of fact.

452
00:18:25 --> 00:18:27
It's assertions of truth.


453
00:18:27 --> 00:18:29
Boy, in this political season,
that's a really dangerous

454
00:18:29 --> 00:18:30
phrase to use, right?


455
00:18:30 --> 00:18:32
But it's a statement of fact.


456
00:18:32 --> 00:18:34
I'll stay away from the
political comments.

457
00:18:34 --> 00:18:35
Let me give you an
example of this.

458
00:18:35 --> 00:18:36
Right.


459
00:18:36 --> 00:18:37
Here's a declarative statement.


460
00:18:37 --> 00:18:44
The square root of x is
that y such that y squared

461
00:18:44 --> 00:18:48
equals x, y's positive.


462
00:18:48 --> 00:18:50
You all know that.


463
00:18:50 --> 00:18:52
But what I want you to
see here, is that's

464
00:18:52 --> 00:18:54
a statement of fact.


465
00:18:54 --> 00:18:55
It's a definition.


466
00:18:55 --> 00:18:55
It's an axiom.


467
00:18:55 --> 00:19:00
It doesn't help you
find square roots.

468
00:19:00 --> 00:19:02
If I say x is 2, I want to
know, what's the square root of

469
00:19:02 --> 00:19:06
2, well if you're enough of a
geek, you'll say 1.41529 or

470
00:19:06 --> 00:19:10
whatever the heck it is, but in
general, this doesn't help

471
00:19:10 --> 00:19:12
you find the square root.


472
00:19:12 --> 00:19:15
The closest it does is
it would let you test.

473
00:19:15 --> 00:19:17
You know, if you're wandering
through Harvard Square and you

474
00:19:17 --> 00:19:19
see an out-of-work Harvard
grad, they're handing out

475
00:19:19 --> 00:19:21
examples of square roots,
they'll give you an example and

476
00:19:21 --> 00:19:23
you can test it to see, is
the square root of 2,

477
00:19:23 --> 00:19:26
1.41529 or whatever.


478
00:19:26 --> 00:19:28
I don't even get laughs
at Harvard jokes, John,

479
00:19:28 --> 00:19:31
I'm going to stop in a
second here, all right?

480
00:19:31 --> 00:19:33
All right, so what am
I trying to say here?

481
00:19:33 --> 00:19:36
It doesn't -- yeah, exactly.


482
00:19:36 --> 00:19:38
We're staying away from that,
really quickly, especially

483
00:19:38 --> 00:19:39
with the cameras rolling.


484
00:19:39 --> 00:19:40
All right.


485
00:19:40 --> 00:19:41
What am I trying to say?


486
00:19:41 --> 00:19:43
It tells you how you might
test something but it

487
00:19:43 --> 00:19:46
doesn't tell you how to.


488
00:19:46 --> 00:19:48
And that's what
imperative knowledge is.

489
00:19:48 --> 00:19:51
Imperative knowledge is
a description of how

490
00:19:51 --> 00:19:52
to deduce something.


491
00:19:52 --> 00:19:54
So let me give you an
example of a piece of

492
00:19:54 --> 00:19:56
imperative knowledge.


493
00:19:56 --> 00:19:58
All right, this is actually a
very old piece of imperative

494
00:19:58 --> 00:20:01
knowledge for computing square
roots, it's attributed to Heron

495
00:20:01 --> 00:20:04
of Alexandria, although I
believe that the Babylonians

496
00:20:04 --> 00:20:07
are suspected of
knowing it beforehand.

497
00:20:07 --> 00:20:09
But here is a piece of
imperative knowledge.

498
00:20:09 --> 00:20:10
All right?


499
00:20:10 --> 00:20:17
I'm going to start with a
guess, I'm going to call it g.

500
00:20:17 --> 00:20:26
And then I'm going to say, if g
squared is close to x, stop.

501
00:20:26 --> 00:20:28
And return g.


502
00:20:28 --> 00:20:30
It's a good enough answer.


503
00:20:30 --> 00:20:38
Otherwise, I'm going to get a
new guess by taking g, x over

504
00:20:38 --> 00:20:42
g, adding them, and
dividing by two.

505
00:20:42 --> 00:20:44
Then you take the average
of g and x over g.

506
00:20:44 --> 00:20:47
Don't worry about how came
about, Heron found this out.

507
00:20:47 --> 00:20:56
But that gives me a new guess,
and I'm going to repeat.

508
00:20:56 --> 00:20:58
That's a recipe.


509
00:20:58 --> 00:21:01
That's a description
of a set of steps.

510
00:21:01 --> 00:21:03
Notice what it has, it has a
bunch of nice things that

511
00:21:03 --> 00:21:05
we want to use, right?


512
00:21:05 --> 00:21:08
It's a sequence of specific
instructions that

513
00:21:08 --> 00:21:10
I do in order.


514
00:21:10 --> 00:21:13
Along the way I have some
tests, and depending on the

515
00:21:13 --> 00:21:17
value of that test, I may
change where I am in that

516
00:21:17 --> 00:21:18
sequence of instructions.


517
00:21:18 --> 00:21:20
And it has an end test,
something that tells

518
00:21:20 --> 00:21:22
me when I'm done and
what the answer is.

519
00:21:22 --> 00:21:24
This tells you how to
find square roots.

520
00:21:24 --> 00:21:25
it's how-to knowledge.


521
00:21:25 --> 00:21:27
It's imperative knowledge.


522
00:21:27 --> 00:21:27
All right.


523
00:21:27 --> 00:21:31
That's what computation
basically is about.

524
00:21:31 --> 00:21:35
We want to have ways of
capturing this process.

525
00:21:35 --> 00:21:37
OK, and that leads now to an
interesting question, which

526
00:21:37 --> 00:21:43
would be, "How do I build a
mechanical process to capture

527
00:21:43 --> 00:21:46
that set of computations?" So
I'm going to suggest that

528
00:21:46 --> 00:21:51
there's an easy way to do it--
I realized I did the boards in

529
00:21:51 --> 00:21:54
the wrong order here-- one of
the ways I could do it is,

530
00:21:54 --> 00:21:57
you could imagine building a
little circuit to do this.

531
00:21:57 --> 00:22:00
If I had a couple of elements
of stored values in it, I had

532
00:22:00 --> 00:22:02
some wires to move things
around, I had a little thing to

533
00:22:02 --> 00:22:05
do addition, little thing to do
division, and a something to do

534
00:22:05 --> 00:22:07
the testing, I could build a
little circuit that would

535
00:22:07 --> 00:22:09
actually do this computation.


536
00:22:09 --> 00:22:11
OK.


537
00:22:11 --> 00:22:15
That, strange as it sounds, is
actually an example of the

538
00:22:15 --> 00:22:18
earliest computers, because the
earliest computers were what we

539
00:22:18 --> 00:22:32
call fixed-program computers,
meaning that they had a piece

540
00:22:32 --> 00:22:35
of circuitry designed to do
a specific computation.

541
00:22:35 --> 00:22:37
And that's what they would
do: they would do that

542
00:22:37 --> 00:22:40
specific computation.


543
00:22:40 --> 00:22:41
You've seen these a lot, right?


544
00:22:41 --> 00:22:47
A good example of
this: calculator.

545
00:22:47 --> 00:22:51
It's basically an example of
a fixed-program computer.

546
00:22:51 --> 00:22:53
It does arithmetic.


547
00:22:53 --> 00:22:55
If you want play video
games on it, good luck.

548
00:22:55 --> 00:22:58
If you want to do word
processing on it, good luck.

549
00:22:58 --> 00:23:00
It's designed to do
a specific thing.

550
00:23:00 --> 00:23:03
It's a fixed-program computer.


551
00:23:03 --> 00:23:05
In fact, a lot of the other
really interesting early ones

552
00:23:05 --> 00:23:09
similarly have this flavor, to
give an example: I never know

553
00:23:09 --> 00:23:14
how to pronounce this,
Atanasoff, 1941.

554
00:23:14 --> 00:23:16
One of the earliest
computational things was a

555
00:23:16 --> 00:23:18
thing designed by a guy named
Atanasoff, and it basically

556
00:23:18 --> 00:23:22
solved linear equations.


557
00:23:22 --> 00:23:26
Handy thing to do if you're
doing 1801, all right, or

558
00:23:26 --> 00:23:29
1806, or whatever you want
to do those things in.

559
00:23:29 --> 00:23:31
All it could do, though,
was solve those equations.

560
00:23:31 --> 00:23:36
One of my favorite examples of
an early computer was done by

561
00:23:36 --> 00:23:39
Alan Turing, one of the great
computer scientists of all

562
00:23:39 --> 00:23:43
time, called the bombe, which
was designed to break codes.

563
00:23:43 --> 00:23:45
It was actually used during
WWII to break German

564
00:23:45 --> 00:23:46
Enigma codes.


565
00:23:46 --> 00:23:48
And what it was designed
to do, was to solve

566
00:23:48 --> 00:23:49
that specific problem.


567
00:23:49 --> 00:23:53
The point I'm trying to make
is, fixed-program computers

568
00:23:53 --> 00:23:55
is where we started, but it
doesn't really get us to

569
00:23:55 --> 00:23:55
where we'd like to be.


570
00:23:55 --> 00:23:58
We want to capture this
idea of problem solving.

571
00:23:58 --> 00:24:01
So let's see how
we'd get there.

572
00:24:01 --> 00:24:05
So even within this framework
of, given a description of a

573
00:24:05 --> 00:24:08
computation as a set of steps,
in the idea that I could build

574
00:24:08 --> 00:24:10
a circuit to do it, let me
suggest for you what would be a

575
00:24:10 --> 00:24:13
wonderful circuit to build.


576
00:24:13 --> 00:24:15
Suppose you could build a
circuit with the following

577
00:24:15 --> 00:24:18
property: the input to
this circuit would be any

578
00:24:18 --> 00:24:20
other circuit diagram.


579
00:24:20 --> 00:24:22
Give it a circuit diagram for
some computation, you give it

580
00:24:22 --> 00:24:26
to the circuit, and that
circuit would wonderfully

581
00:24:26 --> 00:24:30
reconfigure itself to act
like the circuits diagram.

582
00:24:30 --> 00:24:33
Which would mean, it could
act like a calculator.

583
00:24:33 --> 00:24:35
Or, it could act like
Turing's bombe.

584
00:24:35 --> 00:24:38
Or, it could act like a
square root machine.

585
00:24:38 --> 00:24:39
So what would that
circuit look like?

586
00:24:39 --> 00:24:42
You can imagine these tiny
little robots wandering

587
00:24:42 --> 00:24:42
around, right?


588
00:24:42 --> 00:24:44
Pulling wires and pulling
out components and

589
00:24:44 --> 00:24:45
stacking them together.


590
00:24:45 --> 00:24:47
How would you build a circuit
that could take a circuit

591
00:24:47 --> 00:24:53
diagram in and make a machine
act like that circuit?

592
00:24:53 --> 00:24:55
Sounds like a neat challenge.


593
00:24:55 --> 00:24:59
Let me change the
game slightly.

594
00:24:59 --> 00:25:03
Suppose instead, I want a
machine that can take a recipe,

595
00:25:03 --> 00:25:07
the description of a sequence
of steps, take that as its

596
00:25:07 --> 00:25:12
input, and then that machine
will now act like what is

597
00:25:12 --> 00:25:15
described in that recipe.


598
00:25:15 --> 00:25:17
Reconfigure itself, emulate it,
however you want to use the

599
00:25:17 --> 00:25:21
words, it's going to change
how it does the computation.

600
00:25:21 --> 00:25:23
That would be cool.


601
00:25:23 --> 00:25:24
And that exists.


602
00:25:24 --> 00:25:26
It's called an interpreter.


603
00:25:26 --> 00:25:29
It is the basic heart
of every computer.

604
00:25:29 --> 00:25:33
What it is doing, is
saying, change the game.

605
00:25:33 --> 00:25:40
This is now an example of a
stored-program computer.

606
00:25:40 --> 00:25:48
What that means, in a
stored-program computer, is

607
00:25:48 --> 00:25:51
that I can provide to the
computer a sequence of

608
00:25:51 --> 00:25:55
instructions describing the
process I want it to execute.

609
00:25:55 --> 00:25:58
And inside of the machine, and
things we'll talk about, there

610
00:25:58 --> 00:26:02
is a process that will allow
that sequence to be executed as

611
00:26:02 --> 00:26:06
described in that recipe, so it
can behave like any thing that

612
00:26:06 --> 00:26:09
I can describe in one
of those recipes.

613
00:26:09 --> 00:26:10
All right.


614
00:26:10 --> 00:26:14
That actually seems like a
really nice thing to have, and

615
00:26:14 --> 00:26:19
so let me show you what that
would basically look like.

616
00:26:19 --> 00:26:22
Inside of a stored-program
computer, we would have the

617
00:26:22 --> 00:26:31
following: we have a memory,
it's connected to two things;

618
00:26:31 --> 00:26:37
control unit, in what's called
an ALU, an arithmetic logic

619
00:26:37 --> 00:26:46
unit, and this can take in
input, and spit out output, and

620
00:26:46 --> 00:26:50
inside this stored-program
computer, excuse me, you have

621
00:26:50 --> 00:26:55
the following: you have a
sequence of instructions.

622
00:26:55 --> 00:27:03
And these all get
stored in there.

623
00:27:03 --> 00:27:05
Notice the difference.


624
00:27:05 --> 00:27:07
The recipe, the sequence of
instructions, is actually

625
00:27:07 --> 00:27:10
getting read in, and it's
treated just like data.

626
00:27:10 --> 00:27:12
It's inside the memory of the
machine, which means we have

627
00:27:12 --> 00:27:15
access to it, we can change it,
we can use it to build new

628
00:27:15 --> 00:27:19
pieces of code, as well
as we can interpret it.

629
00:27:19 --> 00:27:21
One other piece that goes
into this computer-- I

630
00:27:21 --> 00:27:23
never remember where to
put the PC, John, control?

631
00:27:23 --> 00:27:25
ALU?


632
00:27:25 --> 00:27:26
Separate?


633
00:27:26 --> 00:27:29
I'll put it separate--
you have a thing called

634
00:27:29 --> 00:27:31
a program counter.


635
00:27:31 --> 00:27:34
And here's the basis
of the computation.

636
00:27:34 --> 00:27:38
That program counter points
to some location in memory,

637
00:27:38 --> 00:27:43
typically to the first
instruction in the sequence.

638
00:27:43 --> 00:27:45
And those instructions, by the
way, are very simple: they're

639
00:27:45 --> 00:27:49
things like, take the value out
of two places in memory, and

640
00:27:49 --> 00:27:51
run them through the multiplier
in here, a little piece of

641
00:27:51 --> 00:27:54
circuitry, and stick them back
into someplace in memory.

642
00:27:54 --> 00:27:57
Or take this value out of
memory, run it through some

643
00:27:57 --> 00:28:00
other simple operation,
stick it back in memory.

644
00:28:00 --> 00:28:03
Having executed this
instruction, that counter

645
00:28:03 --> 00:28:05
goes up by one and we
move to the next one.

646
00:28:05 --> 00:28:08
We execute that instruction,
we move to the next one.

647
00:28:08 --> 00:28:13
Oh yeah, it looks a
whole lot like that.

648
00:28:13 --> 00:28:16
Some of those instructions
will involve tests: they'll

649
00:28:16 --> 00:28:18
say, is something true?


650
00:28:18 --> 00:28:22
And if the test is true, it
will change the value of this

651
00:28:22 --> 00:28:25
program counter to point to
some other place in the memory,

652
00:28:25 --> 00:28:28
some other point in that
sequence of instructions,

653
00:28:28 --> 00:28:30
and you'll keep processing.


654
00:28:30 --> 00:28:32
Eventually you'll hopefully
stop, and a value gets spit

655
00:28:32 --> 00:28:34
out, and you're done.


656
00:28:34 --> 00:28:35
That's the heart of a computer.


657
00:28:35 --> 00:28:37
Now that's a slight
misstatement.

658
00:28:37 --> 00:28:39
The process to control it is
intriguing and interesting, but

659
00:28:39 --> 00:28:42
the heart of the computer is
simply this notion that we

660
00:28:42 --> 00:28:46
build our descriptions, our
recipes, on a sequence of

661
00:28:46 --> 00:28:47
primitive instructions.


662
00:28:47 --> 00:28:50
And then we have a
flow of control.

663
00:28:50 --> 00:28:51
And that flow of control
is what I just described.

664
00:28:51 --> 00:28:53
It's moving through a sequence
of instructions, occasionally

665
00:28:53 --> 00:28:57
changing where we are
as we move around.

666
00:28:57 --> 00:28:58
OK.


667
00:28:58 --> 00:29:02
The thing I want you to take
away from this, then, is to

668
00:29:02 --> 00:29:06
think of this as, this is,
if you like, a recipe.

669
00:29:06 --> 00:29:19
And that's really
what a program is.

670
00:29:19 --> 00:29:21
It's a sequence
of instructions.

671
00:29:21 --> 00:29:23
Now, one of things I left
hanging is, I said, OK, you

672
00:29:23 --> 00:29:24
build it out of primitives.


673
00:29:24 --> 00:29:25
So one of the questions is,
well, what are the right

674
00:29:25 --> 00:29:28
primitives to use?


675
00:29:28 --> 00:29:31
And one of the things that
was useful here is, that we

676
00:29:31 --> 00:29:33
actually know that the set of
primitives that you want to

677
00:29:33 --> 00:29:37
use is very straight-forward.


678
00:29:37 --> 00:29:39
OK, but before I do that,
let me drive home this idea

679
00:29:39 --> 00:29:42
of why this is a recipe.


680
00:29:42 --> 00:29:44
Assuming I have a set of
primitive instructions that I

681
00:29:44 --> 00:29:47
can describe everything on, I
want to know what can I build.

682
00:29:47 --> 00:29:49
Well, I'm going to do the same
analogy to a real recipe.

683
00:29:49 --> 00:29:51
So, real recipe.


684
00:29:51 --> 00:29:51
I don't know.


685
00:29:51 --> 00:29:54
Separate six eggs.


686
00:29:54 --> 00:29:55
Do something.


687
00:29:55 --> 00:29:59
Beat until the-- sorry, beat
the whites until they're stiff.

688
00:29:59 --> 00:30:02
Do something until an
end test is true.

689
00:30:02 --> 00:30:05
Take the yolks and mix them in
with the sugar and water-- No.

690
00:30:05 --> 00:30:06
Sugar and flour I guess is
probably what I want, sugar

691
00:30:06 --> 00:30:08
and water is not going to do
anything interesting for me

692
00:30:08 --> 00:30:11
here-- mix them into
something else.

693
00:30:11 --> 00:30:13
Do a sequence of things.


694
00:30:13 --> 00:30:17
A traditional recipe actually
is based on a small set of

695
00:30:17 --> 00:30:21
primitives, and a good chef
with, or good cook, I should

696
00:30:21 --> 00:30:23
say, with that set of
primitives, can create an

697
00:30:23 --> 00:30:26
unbounded number
of great dishes.

698
00:30:26 --> 00:30:28
Same thing holds true
in programming.

699
00:30:28 --> 00:30:29
Right.


700
00:30:29 --> 00:30:34
Given a fixed set of
primitives, all right,

701
00:30:34 --> 00:30:43
a good programmer can
program anything.

702
00:30:43 --> 00:30:45
And by that, I mean anything
that can be described in one of

703
00:30:45 --> 00:30:49
these process, you can capture
in that set of primitives.

704
00:30:49 --> 00:30:51
All right, the question is, as
I started to say, is, "What are

705
00:30:51 --> 00:30:54
the right primitives?" So
there's a little bit of, a

706
00:30:54 --> 00:30:55
little piece of history
here, if you like.

707
00:30:55 --> 00:31:01
In 1936, that same guy, Alan
Turing, showed that with six

708
00:31:01 --> 00:31:05
simple primitives, anything
that could be described in a

709
00:31:05 --> 00:31:08
mechanical process, it's
actually algorithmically, could

710
00:31:08 --> 00:31:12
be programmed just using
those six primitives.

711
00:31:12 --> 00:31:14
Think about that for a second.


712
00:31:14 --> 00:31:16
That's an incredible statement.


713
00:31:16 --> 00:31:20
It says, with six primitives,
I can rule the world.

714
00:31:20 --> 00:31:23
With six primitives, I
can program anything.

715
00:31:23 --> 00:31:25
A couple of really interesting
consequences of that, by the

716
00:31:25 --> 00:31:29
way, one of them is, it says,
anything you can do in one

717
00:31:29 --> 00:31:32
programming language,
you can do in another

718
00:31:32 --> 00:31:33
programming language.


719
00:31:33 --> 00:31:36
And there is no programming
language that is better-- well

720
00:31:36 --> 00:31:37
actually, that's not quite
true, there are some better at

721
00:31:37 --> 00:31:39
doing certain kinds of things--
but there's nothing that you

722
00:31:39 --> 00:31:43
can do in C that you
can't do in Fortran.

723
00:31:43 --> 00:31:45
It's called Turing
compatibility.

724
00:31:45 --> 00:31:46
Anything you can do with one,
you can do with another,

725
00:31:46 --> 00:31:49
it's based on that
fundamental result.

726
00:31:49 --> 00:31:50
OK.


727
00:31:50 --> 00:31:53
Now, fortunately we're not
going to start with Turing's

728
00:31:53 --> 00:31:56
six primitives, this would be
really painful programming,

729
00:31:56 --> 00:31:59
because they're down at the
level of, "take this value and

730
00:31:59 --> 00:32:01
write it onto this tape." First
of all, we don't have tapes

731
00:32:01 --> 00:32:04
anymore in computers, and even
if we did, you don't want to be

732
00:32:04 --> 00:32:05
programming at that level.


733
00:32:05 --> 00:32:07
What we're going to see with
programming language is

734
00:32:07 --> 00:32:09
that we're going to use
higher-level abstracts.

735
00:32:09 --> 00:32:12
A broader set of primitives,
but nonetheless the same

736
00:32:12 --> 00:32:13
fundamental thing holds.


737
00:32:13 --> 00:32:16
With those six primitives,
you can do it.

738
00:32:16 --> 00:32:18
OK.


739
00:32:18 --> 00:32:19
So where are we here?


740
00:32:19 --> 00:32:22
What we're saying is, in order
to do computation, we want to

741
00:32:22 --> 00:32:25
describe recipes, we want to
describe this sequence of steps

742
00:32:25 --> 00:32:29
built on some primitives, and
we want to describe the flow of

743
00:32:29 --> 00:32:31
control that goes through those
sequence of steps

744
00:32:31 --> 00:32:33
as we carry on.


745
00:32:33 --> 00:32:35
So the last thing we need
before we can start talking

746
00:32:35 --> 00:32:39
about real programming is, we
need to describe those recipes.

747
00:32:39 --> 00:32:41
All right, And to describe
the recipes, we're going

748
00:32:41 --> 00:32:54
to want a language.


749
00:32:54 --> 00:32:57
We need to know not only what
are the primitives, but how do

750
00:32:57 --> 00:33:01
we make things meaningful
in that language.

751
00:33:01 --> 00:33:03
Language.


752
00:33:03 --> 00:33:05
There we go.


753
00:33:05 --> 00:33:07
All right.


754
00:33:07 --> 00:33:09
Now, it turns out there are--
I don't know, John, hundreds?

755
00:33:09 --> 00:33:10
Thousands?


756
00:33:10 --> 00:33:11
Of programming languages?


757
00:33:11 --> 00:33:13
At least hundreds-- of
programming languages around.

758
00:33:13 --> 00:33:16
PROFESSOR JOHN GUTTAG:
[UNINTELLIGIBLE]

759
00:33:16 --> 00:33:16
PROFESSOR ERIC GRIMSON: True.


760
00:33:16 --> 00:33:18
Thank you.


761
00:33:18 --> 00:33:21
You know, they all have, you
know, their pluses and minuses.

762
00:33:21 --> 00:33:23
I have to admit, in my career
here, I think I've taught in

763
00:33:23 --> 00:33:25
at least three languages,
I suspect you've taught

764
00:33:25 --> 00:33:27
more, five or six, John?


765
00:33:27 --> 00:33:29
Both of us have probably
programmed in more than those

766
00:33:29 --> 00:33:31
number of languages, at least
programmed that many, since we

767
00:33:31 --> 00:33:33
taught in those languages.


768
00:33:33 --> 00:33:35
One of the things you want
to realize is, there

769
00:33:35 --> 00:33:36
is no best language.


770
00:33:36 --> 00:33:38
At least I would argue that,
I think John would agree.

771
00:33:38 --> 00:33:40
We might both agree we
have our own nominees for

772
00:33:40 --> 00:33:43
worst language, there
are some of those.

773
00:33:43 --> 00:33:44
There is no best language.


774
00:33:44 --> 00:33:44
All right?


775
00:33:44 --> 00:33:46
They all are describing
different things.

776
00:33:46 --> 00:33:48
Having said that, some of
them are better suited for

777
00:33:48 --> 00:33:51
some things than others.


778
00:33:51 --> 00:33:55
Anybody here heard of MATLAB
Maybe programmed in MATLAB?

779
00:33:55 --> 00:33:57
It's great for doing things
with vectors and matrices

780
00:33:57 --> 00:34:01
and things that are easily
captured in that framework.

781
00:34:01 --> 00:34:02
But there's some things
that are a real pain

782
00:34:02 --> 00:34:03
to do in MATLAB.


783
00:34:03 --> 00:34:05
So MATLAB's great for
that kind of thing.

784
00:34:05 --> 00:34:08
C is a great language for
programming things that control

785
00:34:08 --> 00:34:10
data networks, for example.


786
00:34:10 --> 00:34:13
I happen to be, and John teases
me about this regularly, I'm an

787
00:34:13 --> 00:34:16
old-time Lisp programmer, and
that's how I was trained.

788
00:34:16 --> 00:34:19
And I happen to like Lisp and
Scheme, it's a great language

789
00:34:19 --> 00:34:20
when you're trying to deal
with problems where you have

790
00:34:20 --> 00:34:23
arbitrarily structured
data sets.

791
00:34:23 --> 00:34:25
It's particularly good at that.


792
00:34:25 --> 00:34:27
So the point I want to make
here is that there's no

793
00:34:27 --> 00:34:30
particularly best language.


794
00:34:30 --> 00:34:32
What we're going to do is
simply use a language that

795
00:34:32 --> 00:34:33
helps us understand.


796
00:34:33 --> 00:34:38
So in this course, the language
we're going to use is Python.

797
00:34:38 --> 00:34:41
Which is a pretty new language,
it's growing in popularity, it

798
00:34:41 --> 00:34:43
has a lot of the elements of
some other languages because

799
00:34:43 --> 00:34:46
it's more recent, it
inherits things from it's

800
00:34:46 --> 00:34:48
pregenitors, if you like.


801
00:34:48 --> 00:34:50
But one of the things I want
to stress is, this course

802
00:34:50 --> 00:34:54
is not about Python.


803
00:34:54 --> 00:34:55
Strange statement.


804
00:34:55 --> 00:34:58
You do need to know how to use
it, but it's not about the

805
00:34:58 --> 00:35:00
details of, where do the
semi-colons go in Python.

806
00:35:00 --> 00:35:02
All right?


807
00:35:02 --> 00:35:04
It's about using it to think.


808
00:35:04 --> 00:35:06
And what you should take away
from this course is having

809
00:35:06 --> 00:35:10
learned how to design recipes,
how to structure recipes,

810
00:35:10 --> 00:35:13
how to do things in
modes in Python.

811
00:35:13 --> 00:35:16
Those same tools easily
transfer to any other language.

812
00:35:16 --> 00:35:18
You can pick up another
language in a week, couple

813
00:35:18 --> 00:35:22
of weeks at most, once you
know how to do Python.

814
00:35:22 --> 00:35:23
OK.


815
00:35:23 --> 00:35:25
In order to talk about Python
and languages, I want to do one

816
00:35:25 --> 00:35:28
last thing to set the stage for
what we're going to do here,

817
00:35:28 --> 00:35:30
and that's to talk about the
different dimensions

818
00:35:30 --> 00:35:31
of a language.


819
00:35:31 --> 00:35:33
And there're three I
want to deal with.

820
00:35:33 --> 00:35:35
The first one is, whether
this is a high-level

821
00:35:35 --> 00:35:41
or low-level language.


822
00:35:41 --> 00:35:42
That basically says,
how close are you the

823
00:35:42 --> 00:35:43
guts of the machine?


824
00:35:43 --> 00:35:45
A low-level language, we used
to call this assembly

825
00:35:45 --> 00:35:48
programming, you're down at the
level of, your primitives are

826
00:35:48 --> 00:35:51
literally moving pieces of data
from one location of memory to

827
00:35:51 --> 00:35:54
another, through a very
simple operation.

828
00:35:54 --> 00:35:57
A high-level language, the
designer has created a much

829
00:35:57 --> 00:35:59
richer set of primitive things.


830
00:35:59 --> 00:36:02
In a high-level language,
square root might simply be a

831
00:36:02 --> 00:36:04
primitive that you can use,
rather than you having

832
00:36:04 --> 00:36:06
to go over and code it.


833
00:36:06 --> 00:36:08
And there're trade-offs
between both.

834
00:36:08 --> 00:36:12
Second dimension is, whether
this is a general versus

835
00:36:12 --> 00:36:15
a targeted language.


836
00:36:15 --> 00:36:18
And by that I mean, do the set
of primitives support a broad

837
00:36:18 --> 00:36:22
range of applications, or is
it really aimed at a very

838
00:36:22 --> 00:36:23
specific set of applications?


839
00:36:23 --> 00:36:25
I'd argue that MATLAB is
basically a targeted language,

840
00:36:25 --> 00:36:29
it's targeted at matrices and
vectors and things like that.

841
00:36:29 --> 00:36:31
And the third one I want to
point out is, whether this

842
00:36:31 --> 00:36:41
is an interpreted versus
a compiled language.

843
00:36:41 --> 00:36:45
What that basically says is the
following: in an interpreted

844
00:36:45 --> 00:36:46
language, you take what's
called the source code, the

845
00:36:46 --> 00:36:49
thing you write, it may go
through a simple checker but it

846
00:36:49 --> 00:36:52
basically goes to the
interpreter, that thing inside

847
00:36:52 --> 00:36:54
the machine that's going to
control the flow of going

848
00:36:54 --> 00:36:56
through each one of
the instructions, and

849
00:36:56 --> 00:36:57
give you an output.


850
00:36:57 --> 00:37:00
So the interpreter is simply
operating directly on

851
00:37:00 --> 00:37:02
your code at run time.


852
00:37:02 --> 00:37:05
In a compiled language, you
have an intermediate step, in

853
00:37:05 --> 00:37:07
which you take the source code,
it runs through what's called a

854
00:37:07 --> 00:37:10
checker or a compiler or both,
and it creates what's

855
00:37:10 --> 00:37:11
called object code.


856
00:37:11 --> 00:37:16
And that does two things: one,
it helps catch bugs in your

857
00:37:16 --> 00:37:19
code, and secondly it often
converts it into a more

858
00:37:19 --> 00:37:21
efficient sequence of
instructions before you

859
00:37:21 --> 00:37:24
actually go off and run it.


860
00:37:24 --> 00:37:24
All right?


861
00:37:24 --> 00:37:25
And there's trade-offs
between both.

862
00:37:25 --> 00:37:28
I mean, an interpreted language
is often easier to debug,

863
00:37:28 --> 00:37:30
because you can still see your
raw code there, but it's

864
00:37:30 --> 00:37:31
not always as fast.


865
00:37:31 --> 00:37:33
A compiled language is
usually much faster in

866
00:37:33 --> 00:37:34
terms of its execution.


867
00:37:34 --> 00:37:37
And it's one of the things
you may want to trade off.

868
00:37:37 --> 00:37:38
Right.


869
00:37:38 --> 00:37:43
In the case of Python, it's
a high-level language.

870
00:37:43 --> 00:37:45
I would argue, I think
John would agree with

871
00:37:45 --> 00:37:47
me, it's basically a
general-purpose language.

872
00:37:47 --> 00:37:50
It happens to be better suited
for manipulating strings than

873
00:37:50 --> 00:37:52
numbers, for example, but it's
really a general-purpose

874
00:37:52 --> 00:37:53
language.


875
00:37:53 --> 00:37:56
And it's primarily-- I
shouldn't say primarily, it

876
00:37:56 --> 00:37:58
is an interpreted language.


877
00:37:58 --> 00:37:59
OK?


878
00:37:59 --> 00:38:03
As a consequence, it's not as
good as helping debug, but it

879
00:38:03 --> 00:38:04
does let you-- sorry, that's
the wrong way of saying-- it's

880
00:38:04 --> 00:38:07
not as good at catching some
things before you run them, it

881
00:38:07 --> 00:38:09
is easier at some times in
debugging as you go

882
00:38:09 --> 00:38:11
along on the fly.


883
00:38:11 --> 00:38:11
OK.


884
00:38:11 --> 00:38:13
So what does Python look like?


885
00:38:13 --> 00:38:16
In order to talk about Python--
actually, I'm going to do it

886
00:38:16 --> 00:38:22
this way-- we need to talk
about how to write

887
00:38:22 --> 00:38:22
things in Python.


888
00:38:22 --> 00:38:26
Again, you have to let me back
up slightly and set the stage.

889
00:38:26 --> 00:38:28
Our goal is to build recipes.


890
00:38:28 --> 00:38:29
You're all going to be
great chefs by the

891
00:38:29 --> 00:38:30
time you're done here.


892
00:38:30 --> 00:38:32
All right?


893
00:38:32 --> 00:38:35
Our goal is to take problems
and break them down into these

894
00:38:35 --> 00:38:37
computational steps, these
sequence of instructions

895
00:38:37 --> 00:38:40
that'll allow us to
capture that process.

896
00:38:40 --> 00:38:42
To do that, we need to
describe: not only, what are

897
00:38:42 --> 00:38:45
the primitives, but how do we
capture things legally in that

898
00:38:45 --> 00:38:47
language, and interact
with the computer?

899
00:38:47 --> 00:38:49
And so for that, we
need a language.

900
00:38:49 --> 00:38:51
We're about to start talking
about the elements of the

901
00:38:51 --> 00:38:54
language, but to do that, we
also need to separate out one

902
00:38:54 --> 00:38:58
last piece of distinction.


903
00:38:58 --> 00:38:59
Just like with a natural
language, we're going to

904
00:38:59 --> 00:39:02
separate out syntax
versus semantics.

905
00:39:02 --> 00:39:03
So what's syntax?


906
00:39:03 --> 00:39:09
Syntax basically says, what
are the legal expressions

907
00:39:09 --> 00:39:16
in this language?


908
00:39:16 --> 00:39:22
Boy, my handwriting is
atrocious, isn't it?

909
00:39:22 --> 00:39:25
There's a English
sequence of words.

910
00:39:25 --> 00:39:27
It's not since syntactically
correct, right?

911
00:39:27 --> 00:39:28
It's not a sentence.


912
00:39:28 --> 00:39:30
There's no verb in there
anywhere, it's just

913
00:39:30 --> 00:39:31
a sequence of nouns.


914
00:39:31 --> 00:39:32
Same thing in our languages.


915
00:39:32 --> 00:39:35
We have to describe how do
you put together legally

916
00:39:35 --> 00:39:38
formed expressions.


917
00:39:38 --> 00:39:39
OK?


918
00:39:39 --> 00:39:40
And as we add constructs
to the language, we're

919
00:39:40 --> 00:39:42
going to talk about.


920
00:39:42 --> 00:39:45
Second thing we want to talk
about very briefly as we go

921
00:39:45 --> 00:39:48
along is the semantics
of the language.

922
00:39:48 --> 00:39:50
And here we're going to break
out two pieces; static

923
00:39:50 --> 00:39:53
semantics and full semantics.


924
00:39:53 --> 00:40:05
Static semantics basically says
which programs are meaningful.

925
00:40:05 --> 00:40:09
Which expressions make sense.


926
00:40:09 --> 00:40:17
Here's an English sentence.


927
00:40:17 --> 00:40:20
It's syntactically correct.


928
00:40:20 --> 00:40:20
Right?


929
00:40:20 --> 00:40:23
Noun phrase, verb, noun phrase.


930
00:40:23 --> 00:40:25
I'm not certain it's
meaningful, unless you are in

931
00:40:25 --> 00:40:29
the habit of giving your
furniture personal names.

932
00:40:29 --> 00:40:30
What's the point?


933
00:40:30 --> 00:40:33
Again, you can have things that
are syntactically legal but not

934
00:40:33 --> 00:40:36
semantically meaningful, and
static semantics is going to be

935
00:40:36 --> 00:40:40
a way of helping us decide what
expressions, what pieces of

936
00:40:40 --> 00:40:41
code, actually have
real meaning to it.

937
00:40:41 --> 00:40:43
All right?


938
00:40:43 --> 00:40:47
The last piece of it is, in
addition to having static

939
00:40:47 --> 00:40:53
semantics, we have sort
of full semantics.

940
00:40:53 --> 00:40:58
Which is, what does
the program mean?

941
00:40:58 --> 00:40:59
Or, said a different
way, what's going to

942
00:40:59 --> 00:41:08
happen when I run it?


943
00:41:08 --> 00:41:09
That's the meaning
of the expression.

944
00:41:09 --> 00:41:10
That's what you want.


945
00:41:10 --> 00:41:10
All right?


946
00:41:10 --> 00:41:13
You want to know, what's the
meaning of this piece of code?

947
00:41:13 --> 00:41:14
When I run it, what's
going to happen?

948
00:41:14 --> 00:41:16
That's what I want to build.


949
00:41:16 --> 00:41:19
The reason for pulling this out
is, what you're going to see

950
00:41:19 --> 00:41:24
is, that in most languages, and
certainly in Python-- we got

951
00:41:24 --> 00:41:29
lots of help here-- all right,
Python comes built-in with

952
00:41:29 --> 00:41:32
something that will check your
static, sorry, your

953
00:41:32 --> 00:41:33
syntax for you.


954
00:41:33 --> 00:41:37
And in fact, as a sidebar, if
you turn in a problem set that

955
00:41:37 --> 00:41:40
is not syntactically correct,
there's a simple button that

956
00:41:40 --> 00:41:42
you push that will
check your syntax.

957
00:41:42 --> 00:41:44
If you've turned in a program
that's not syntactically

958
00:41:44 --> 00:41:46
correct, the TAs
give you a zero.

959
00:41:46 --> 00:41:48
Because it said you didn't even
take the time to make sure

960
00:41:48 --> 00:41:49
the syntax is correct.


961
00:41:49 --> 00:41:50
The system will
help you find it.

962
00:41:50 --> 00:41:53
In Python, it'll find
it, I think one bug at

963
00:41:53 --> 00:41:53
a time, right John?


964
00:41:53 --> 00:41:55
It finds one syntax error at
a time, so you have to be a

965
00:41:55 --> 00:41:57
little patient to do it,
but you can check that

966
00:41:57 --> 00:41:59
the syntax is right.


967
00:41:59 --> 00:42:06
You're going to see that we get
some help here on the static

968
00:42:06 --> 00:42:09
semantics, and I'm going to do
an example in a second, meaning

969
00:42:09 --> 00:42:12
that the system, some languages
are better than others on it,

970
00:42:12 --> 00:42:18
but it will try and help you
catch some things that are not

971
00:42:18 --> 00:42:21
semantically correct
statically.

972
00:42:21 --> 00:42:23
In the case of Python, it does
that I think all at run time.

973
00:42:23 --> 00:42:25
I'm looking to you again,
John, I think there's

974
00:42:25 --> 00:42:27
no pre-time checks.


975
00:42:27 --> 00:42:27
Its-- sorry?


976
00:42:27 --> 00:42:28
PROFESSOR JOHN GUTTAG:
[UNINTELLIGIBLE]

977
00:42:28 --> 00:42:31
PROFESSOR ERIC GRIMSON:
There is some.

978
00:42:31 --> 00:42:32
OK.


979
00:42:32 --> 00:42:35
Most of them, I think though,
are primarily caught at run

980
00:42:35 --> 00:42:37
time, and that's a little bit
of a pain because you don't see

981
00:42:37 --> 00:42:38
it until you go and run the
code, and there are some,

982
00:42:38 --> 00:42:40
actually we're going to see an
example I think in a second

983
00:42:40 --> 00:42:43
where you find it, but you
do get some help there.

984
00:42:43 --> 00:42:47
The problem is, things that
you catch here are actually

985
00:42:47 --> 00:42:49
the least worrisome bugs.


986
00:42:49 --> 00:42:52
They're easy to spot, you can't
run the program with them

987
00:42:52 --> 00:42:55
there, so you're not going
to get weird answers.

988
00:42:55 --> 00:42:58
Not everything is going
to get caught in static

989
00:42:58 --> 00:42:59
semantics checking.


990
00:42:59 --> 00:43:01
Some things are going to
slide through, and that's

991
00:43:01 --> 00:43:03
actually a bother.


992
00:43:03 --> 00:43:04
It's a problem.


993
00:43:04 --> 00:43:07
Because it says, your program
will still give you a value,

994
00:43:07 --> 00:43:10
but it may not be what you
intended, and you can't always

995
00:43:10 --> 00:43:12
tell, and that may propagate
it's way down through a whole

996
00:43:12 --> 00:43:14
bunch of other computations
before it causes some

997
00:43:14 --> 00:43:16
catastrophic failure.


998
00:43:16 --> 00:43:19
So actually, the problem with
static semantics is you'd

999
00:43:19 --> 00:43:21
like it to catch everything,
you don't always get it.

1000
00:43:21 --> 00:43:23
Sadly we don't get
much help here.

1001
00:43:23 --> 00:43:25
Which is where we'd like it.


1002
00:43:25 --> 00:43:27
But that's part of your job.


1003
00:43:27 --> 00:43:27
OK.


1004
00:43:27 --> 00:43:30
What happens if you actually
have something that's both

1005
00:43:30 --> 00:43:32
syntactically correct, and
appears to have correct static

1006
00:43:32 --> 00:43:33
semantics, and you run it?


1007
00:43:33 --> 00:43:37
It could run and give you the
right answer, it could crash,

1008
00:43:37 --> 00:43:42
it could loop forever, it
could run and apparently

1009
00:43:42 --> 00:43:45
give you the right answer.


1010
00:43:45 --> 00:43:47
And you're not always
going to be able to tell.

1011
00:43:47 --> 00:43:49
Well, you'll know when it
crashes, that doesn't help you

1012
00:43:49 --> 00:43:51
very much, but you can't always
tell whether something's stuck

1013
00:43:51 --> 00:43:53
in an infinite loop or
whether it's simply taking a

1014
00:43:53 --> 00:43:54
long time to compute.


1015
00:43:54 --> 00:43:57
You'd love to have a system
that spots that for you,

1016
00:43:57 --> 00:43:58
but it's not possible.


1017
00:43:58 --> 00:44:02
And so to deal with this last
one, you need to develop style.

1018
00:44:02 --> 00:44:06
All right?


1019
00:44:06 --> 00:44:09
Meaning, we're going to try to
help you with how to develop

1020
00:44:09 --> 00:44:12
good programming style, but you
need to write in a way in which

1021
00:44:12 --> 00:44:16
it is going to be easy for you
to spot the places that cause

1022
00:44:16 --> 00:44:19
those semantic bugs to occur.


1023
00:44:19 --> 00:44:20
All right.


1024
00:44:20 --> 00:44:23
If that sounds like a really
long preamble, it is.

1025
00:44:23 --> 00:44:24
Let's start with Python.


1026
00:44:24 --> 00:44:28
But again, my goal here is to
let you see what computation's

1027
00:44:28 --> 00:44:30
about, why we need to do it,
I'm going to remind you one

1028
00:44:30 --> 00:44:32
last time, our goal is to be
able to have a set of

1029
00:44:32 --> 00:44:35
primitives that we combine into
complex expressions, which we

1030
00:44:35 --> 00:44:39
can then abstract to treat as
primitives, and we want to use

1031
00:44:39 --> 00:44:43
that sequence of instructions
in this flow of control

1032
00:44:43 --> 00:44:47
computing, in order to
deduce new information.

1033
00:44:47 --> 00:44:50
That imperative knowledge that
we talked about right there.

1034
00:44:50 --> 00:44:53
So I'm going to start today, we
have about five or ten minutes

1035
00:44:53 --> 00:44:54
left, I think, in order--
sorry, five minutes left-- in

1036
00:44:54 --> 00:44:57
order to do this with some
beginnings of Python, and we're

1037
00:44:57 --> 00:44:59
going to pick this up
obviously, next time, so;

1038
00:44:59 --> 00:45:02
simple parts of Python.


1039
00:45:02 --> 00:45:04
In order to create any kinds
of expressions, we're

1040
00:45:04 --> 00:45:06
going to need values.


1041
00:45:06 --> 00:45:07
Primitive data elements.


1042
00:45:07 --> 00:45:13
And in Python, we have two to
start with; we have numbers,

1043
00:45:13 --> 00:45:16
and we have strings.


1044
00:45:16 --> 00:45:18
Numbers is what you'd expect.


1045
00:45:18 --> 00:45:21
There's a number.


1046
00:45:21 --> 00:45:21
There's another number.


1047
00:45:21 --> 00:45:24
All right?


1048
00:45:24 --> 00:45:28
Strings are captured in Python
with an open quote and some

1049
00:45:28 --> 00:45:33
sequence of characters
followed by a closed quote.

1050
00:45:33 --> 00:45:37
Associated with every data type
in Python is a type, which

1051
00:45:37 --> 00:45:40
identifies the kind
of thing it is.

1052
00:45:40 --> 00:45:41
Some of these are obvious.


1053
00:45:41 --> 00:45:44
Strings are just a
type on their own.

1054
00:45:44 --> 00:45:47
But for numbers, for example,
we can have a variety of types.

1055
00:45:47 --> 00:45:49
So this is something
that we would call an

1056
00:45:49 --> 00:45:50
integer, or an INT.


1057
00:45:50 --> 00:45:54
And this is something we
would call a floating

1058
00:45:54 --> 00:45:57
point, or a float.


1059
00:45:57 --> 00:45:59
Or if you want to think
of it as a real number.

1060
00:45:59 --> 00:46:01
And there's some others
that we can see.

1061
00:46:01 --> 00:46:04
We're going to build up this
taxonomy if you like, but the

1062
00:46:04 --> 00:46:07
reason it's relevant is,
associated with each one of

1063
00:46:07 --> 00:46:11
those types is a set of
operators that expect certain

1064
00:46:11 --> 00:46:13
types of input in order
to do their job.

1065
00:46:13 --> 00:46:16
And given those types of
input, will get back output.

1066
00:46:16 --> 00:46:17
All right.


1067
00:46:17 --> 00:46:19
In order to deal with this, let
me show you an example, and

1068
00:46:19 --> 00:46:21
I hope that comes up, great.


1069
00:46:21 --> 00:46:25
What I have here is a Python
shell, and I'm going to

1070
00:46:25 --> 00:46:27
just show you some simple
examples of how we start

1071
00:46:27 --> 00:46:28
building expressions.


1072
00:46:28 --> 00:46:30
And this'll lead into what
you're going to see next

1073
00:46:30 --> 00:46:32
time as well as what you're
going to do tomorrow.

1074
00:46:32 --> 00:46:33
So.


1075
00:46:33 --> 00:46:37
Starting with the shell, I
can type in expressions.

1076
00:46:37 --> 00:46:38
Actually, let me back up
and do this in video.

1077
00:46:38 --> 00:46:42
I can type in a number, I get
back a number, I can type in a

1078
00:46:42 --> 00:46:46
string, I get back the string.


1079
00:46:46 --> 00:46:49
Strings, by the way, can have
spaces in them, they can have

1080
00:46:49 --> 00:46:52
other characters, it's simply a
sequence of things, and notice,

1081
00:46:52 --> 00:47:00
by the way, that the string
five-- sorry, the string's

1082
00:47:00 --> 00:47:03
digit five digit two is
different than the number 52.

1083
00:47:03 --> 00:47:05
The quotes are around them
to make that distinction.

1084
00:47:05 --> 00:47:07
We're going to see
why in a second.

1085
00:47:07 --> 00:47:09
What I'm doing, by the way,
here is I'm simply typing

1086
00:47:09 --> 00:47:11
in expressions to
that interpreter.

1087
00:47:11 --> 00:47:13
It's using its set of rules
to deduce the value and

1088
00:47:13 --> 00:47:15
print them back out.


1089
00:47:15 --> 00:47:17
Things I might like to do in
here is, I might like to

1090
00:47:17 --> 00:47:19
do combinations of
things with these.

1091
00:47:19 --> 00:47:23
So we have associated
with simple things,

1092
00:47:23 --> 00:47:27
a set of operations.


1093
00:47:27 --> 00:47:32
So for numbers, we have
the things you'd expect,

1094
00:47:32 --> 00:47:33
the arithmetics.


1095
00:47:33 --> 00:47:35
And let me show you
some examples of that.

1096
00:47:35 --> 00:47:38
And actually, I'm going to do
one other distinction here.

1097
00:47:38 --> 00:47:40
What I typed in, things like--
well, let me start this

1098
00:47:40 --> 00:47:44
way-- there's an expression.


1099
00:47:44 --> 00:47:49
And in Python the expression
is, operand, operator, operand,

1100
00:47:49 --> 00:47:51
when we're doing simple
expressions like this, and if I

1101
00:47:51 --> 00:47:54
give it to the interpreter, it
gives me back exactly what

1102
00:47:54 --> 00:47:56
you'd expect, which
is that value.

1103
00:47:56 --> 00:47:57
OK?


1104
00:47:57 --> 00:47:59
The distinction I'm going to
make is, that's an expression.

1105
00:47:59 --> 00:48:01
The interpreter is going
to get a value for it.

1106
00:48:01 --> 00:48:04
When we start building up code,
we're going to use commands.

1107
00:48:04 --> 00:48:05
Or statements.


1108
00:48:05 --> 00:48:07
Which are actually things
that take in a value

1109
00:48:07 --> 00:48:09
and ask the computer to
do something with it.

1110
00:48:09 --> 00:48:13
So I can similarly do this,
which is going to look strange

1111
00:48:13 --> 00:48:16
because it's going to give me
the same value back out, but it

1112
00:48:16 --> 00:48:17
actually did a slightly
different thing.

1113
00:48:17 --> 00:48:19
And notice, by the way, when
I typed it how print showed

1114
00:48:19 --> 00:48:21
up in a different color?


1115
00:48:21 --> 00:48:24
That's the Python saying, that
is a command, that is a

1116
00:48:24 --> 00:48:26
specific command to get the
value of the expression

1117
00:48:26 --> 00:48:27
and print it back out.


1118
00:48:27 --> 00:48:29
When we start writing code,
you're going to see that

1119
00:48:29 --> 00:48:31
difference, but for now,
don't worry about it, I just

1120
00:48:31 --> 00:48:33
want to plant that idea.


1121
00:48:33 --> 00:48:33
OK.


1122
00:48:33 --> 00:48:35
Once we've got that, we
can certainly, though,

1123
00:48:35 --> 00:48:39
do things like this.


1124
00:48:39 --> 00:48:42
Notice the quotes around it.


1125
00:48:42 --> 00:48:44
And it treats it as a string,
it's simply getting me back the

1126
00:48:44 --> 00:48:49
value of that string, 52 times
7, rather than the value of it.

1127
00:48:49 --> 00:48:52
Now, once we've got that,
we can start doing things.

1128
00:48:52 --> 00:48:53
And I'm going to use print
here-- if I could type, in

1129
00:48:53 --> 00:48:56
order to just to get into that,
I can't type, here we go-- in

1130
00:48:56 --> 00:48:57
order to get into the habit.


1131
00:48:57 --> 00:49:00
I can print out a string.


1132
00:49:00 --> 00:49:10
I can print out-- Ah!-- Here's
a first example of something

1133
00:49:10 --> 00:49:11
that caught one of my things.


1134
00:49:11 --> 00:49:15
This is a static
semantic error.

1135
00:49:15 --> 00:49:16
So what went on here?


1136
00:49:16 --> 00:49:18
I gave it an expression that
had an operand in there.

1137
00:49:18 --> 00:49:21
It expected arithmetic types.


1138
00:49:21 --> 00:49:23
But I gave two strings.


1139
00:49:23 --> 00:49:26
And so it's complaining at me,
saying, you can't do this.

1140
00:49:26 --> 00:49:27
I don't know how to
take two strings and

1141
00:49:27 --> 00:49:30
multiply them together.


1142
00:49:30 --> 00:49:32
Unfortunately-- now John you
may disagree with me on this

1143
00:49:32 --> 00:49:34
one-- unfortunately in Python
you can, however, do

1144
00:49:34 --> 00:49:37
things like this.


1145
00:49:37 --> 00:49:39
What do you figure
that's going to do?

1146
00:49:39 --> 00:49:41
Look legal?


1147
00:49:41 --> 00:49:45
The string three times
the number three?

1148
00:49:45 --> 00:49:49
Well it happens to give me
three threes in a row.

1149
00:49:49 --> 00:49:50
I hate this.


1150
00:49:50 --> 00:49:51
I'm sorry, John, I hate this.


1151
00:49:51 --> 00:49:55
Because this is overloading
that multiplication operator

1152
00:49:55 --> 00:49:56
with two different tasks.


1153
00:49:56 --> 00:49:57
It's saying, if you give
me two numbers, I'll

1154
00:49:57 --> 00:49:58
do the right thing.


1155
00:49:58 --> 00:50:00
If you give me a number and a
string, I'm going to

1156
00:50:00 --> 00:50:03
concatenate them together, it's
really different operations,

1157
00:50:03 --> 00:50:05
but nonetheless, it's
what it's going to do.

1158
00:50:05 --> 00:50:11
STUDENT: [UNINTELLIGIBLE]


1159
00:50:11 --> 00:50:12
PROFESSOR ERIC GRIMSON:
There you go.

1160
00:50:12 --> 00:50:14
You know, there will be a
rebuttal phase a little later

1161
00:50:14 --> 00:50:16
on, just like with the
political debates, and he likes

1162
00:50:16 --> 00:50:19
it as a feature, I don't like
it, you can tell he's not a

1163
00:50:19 --> 00:50:20
Lisp programmer and I am.


1164
00:50:20 --> 00:50:21
All right.


1165
00:50:21 --> 00:50:22
I want to do just a couple
more quick examples.

1166
00:50:22 --> 00:50:23
Here's another one.


1167
00:50:23 --> 00:50:24
Ah-ha!


1168
00:50:24 --> 00:50:28
Give you an example
of a syntax error.

1169
00:50:28 --> 00:50:31
Because 52A doesn't make sense.


1170
00:50:31 --> 00:50:32
And you might say, wait a
minute, isn't that a string,

1171
00:50:32 --> 00:50:34
and the answer's no, I
didn't say it's a string by

1172
00:50:34 --> 00:50:35
putting quotes around it.


1173
00:50:35 --> 00:50:38
And notice how the machine
responds differently to it.

1174
00:50:38 --> 00:50:41
In this case it says, this is a
syntax error, and it's actually

1175
00:50:41 --> 00:50:44
highlighting where it came from
so I can go back and fix it.

1176
00:50:44 --> 00:50:45
All right.


1177
00:50:45 --> 00:50:48
Let's do a couple of
other simple examples.

1178
00:50:48 --> 00:50:49
All right?


1179
00:50:49 --> 00:50:50
I can do multiplication.


1180
00:50:50 --> 00:50:51
I've already seen that.


1181
00:50:51 --> 00:50:52
I can do addition.


1182
00:50:52 --> 00:50:54
Three plus five.


1183
00:50:54 --> 00:50:58
I can take something to a
power, double star, just take

1184
00:50:58 --> 00:50:59
three to the fifth power.


1185
00:50:59 --> 00:51:03
I can do division, right?


1186
00:51:03 --> 00:51:04
Whoa.


1187
00:51:04 --> 00:51:05
Right?


1188
00:51:05 --> 00:51:08
Three divided by five is zero?


1189
00:51:08 --> 00:51:10
Maybe in Bush econom-- no, I'm
not going to do any political

1190
00:51:10 --> 00:51:12
comments today, I will
not say that, all right?

1191
00:51:12 --> 00:51:14
What happened?


1192
00:51:14 --> 00:51:16
Well, this is one of the places
where you have to be careful.

1193
00:51:16 --> 00:51:19
It's doing integer division.


1194
00:51:19 --> 00:51:22
So, three divided by
five is zero, with a

1195
00:51:22 --> 00:51:23
remainder of three.


1196
00:51:23 --> 00:51:24
So this is the correct answer.


1197
00:51:24 --> 00:51:28
If I wanted to get full, real
division, I should make

1198
00:51:28 --> 00:51:30
one of them a float.


1199
00:51:30 --> 00:51:32
And yes, you can look at that
and say, well is that right?

1200
00:51:32 --> 00:51:35
Well, up to some level of
accuracy, yeah, that's .6 is

1201
00:51:35 --> 00:51:36
what I'd like to get out.


1202
00:51:36 --> 00:51:38
All right.


1203
00:51:38 --> 00:51:40
I can do other things.


1204
00:51:40 --> 00:51:46
In a particular, I have similar
operations on strings.

1205
00:51:46 --> 00:51:48
OK, I can certainly print out
strings, but I can actually add

1206
00:51:48 --> 00:51:51
strings together, and just as
you saw, I can multiply

1207
00:51:51 --> 00:51:53
strings, you can kind of guess
what this is going to do.

1208
00:51:53 --> 00:51:58
It is going to merge them
together into one thing.

1209
00:51:58 --> 00:52:00
I want-- I know I'm running you
slightly over, I want to do one

1210
00:52:00 --> 00:52:03
last example, it's, I also
want to be able to do, have

1211
00:52:03 --> 00:52:05
variables to store things.


1212
00:52:05 --> 00:52:11
And to do that, in this it
says, if I have a value, I want

1213
00:52:11 --> 00:52:20
to keep it around, to do that,
I can do things like this.

1214
00:52:20 --> 00:52:21
What does that statement do?


1215
00:52:21 --> 00:52:24
It says, create a name for a
variable-- which I just did

1216
00:52:24 --> 00:52:28
there, in fact, let me type it
in-- mystring, with an equal

1217
00:52:28 --> 00:52:32
sign, which is saying, assign
or bind to that name the value

1218
00:52:32 --> 00:52:35
of the following expression.


1219
00:52:35 --> 00:52:39
As a consequence, I can now
refer to that just by its name.

1220
00:52:39 --> 00:52:43
If I get the value of mystring,
there it is, or if I say, take

1221
00:52:43 --> 00:52:49
mystring and add to it the
string, mylastname, and

1222
00:52:49 --> 00:52:51
print it back out.


1223
00:52:51 --> 00:52:53
So this is the first
start of this.

1224
00:52:53 --> 00:52:54
What have we done?


1225
00:52:54 --> 00:52:57
We've got values,
numbers and strings.

1226
00:52:57 --> 00:52:59
We have operations to
associate with them.

1227
00:52:59 --> 00:53:00
I just threw a couple up here.


1228
00:53:00 --> 00:53:02
You're going to get a chance to
explore them, and you'll see

1229
00:53:02 --> 00:53:05
not only are there the standard
numerics for strings, there are

1230
00:53:05 --> 00:53:06
things like length or plus
or other things you

1231
00:53:06 --> 00:53:08
can do with them.


1232
00:53:08 --> 00:53:10
And once I have values, I want
to get a hold of them so

1233
00:53:10 --> 00:53:11
I can give them names.


1234
00:53:11 --> 00:53:12
And that's what I just
did when I bound that.

1235
00:53:12 --> 00:53:16
I said, use the name mystring
to be bound to or have the

1236
00:53:16 --> 00:53:19
value of Eric, so I can
refer to it anywhere else

1237
00:53:19 --> 00:53:20
that I want to use it.


1238
00:53:20 --> 00:53:23
And I apologize for taking you
over, we'll come back to this

1239
00:53:23 --> 00:53:25
next time, please go to the
website to sign up for

1240
00:53:25 --> 00:53:27
recitation for tomorrow.


1241
00:53:27 --> 00:53:29



